{
  "address": "0x6e63faf976B3f3287f5DeD4103Ccbb39C5BA6Dc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "floraArmyAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "faunaArmyAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fieldID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "conqueror",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isGreen",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "defender",
          "type": "uint256[]"
        }
      ],
      "name": "FieldState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "prefixURI",
          "type": "string"
        }
      ],
      "name": "Propose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalArea",
          "type": "uint256"
        }
      ],
      "name": "TotalArea",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fieldID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "generation",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalArea",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "floraWin",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "faunaWin",
          "type": "bool"
        }
      ],
      "name": "Winner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "propInterval_",
          "type": "uint256"
        }
      ],
      "name": "changePropInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "seriesName_",
          "type": "string"
        }
      ],
      "name": "changeSeriesName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slottingFee_",
          "type": "uint256"
        }
      ],
      "name": "changeSlottingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "voteInterval_",
          "type": "uint256"
        }
      ],
      "name": "changeVoteInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "claimFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "increaseSize",
          "type": "uint256"
        }
      ],
      "name": "expand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "faunaArmy",
      "outputs": [
        {
          "internalType": "contract ARMY",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fieldID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "attackerID",
          "type": "uint256"
        }
      ],
      "name": "faunaConquer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "faunaFieldCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "faunaOnField",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fieldDefender",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fieldGeneration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fieldLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "floraArmy",
      "outputs": [
        {
          "internalType": "contract ARMY",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fieldID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "attackerID",
          "type": "uint256"
        }
      ],
      "name": "floraConquer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "floraFieldCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "floraOnField",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllFieldInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "leader",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "defender",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "isFlora",
              "type": "bool"
            }
          ],
          "internalType": "struct BattleBase.FieldInfo[]",
          "name": "allFieldInfo",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposalInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "prefixURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Battlefield.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fieldID",
          "type": "uint256"
        }
      ],
      "name": "getFieldDefender",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fieldID",
          "type": "uint256"
        }
      ],
      "name": "getFieldInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "leader",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "defender",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "isFlora",
              "type": "bool"
            }
          ],
          "internalType": "struct BattleBase.FieldInfo",
          "name": "fieldInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fieldID",
          "type": "uint256"
        }
      ],
      "name": "getFieldLeader",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isFloraField",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "propInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "prefixURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "prefixURI",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fieldID",
          "type": "uint256"
        }
      ],
      "name": "retreat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seriesName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slottingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalArea",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fieldID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3fc8d1c2240e9a055de84c952dd9c7b27cad66b89d3e494f7630d855b1b3c7a8",
  "receipt": {
    "to": null,
    "from": "0x586EbeC665DEa9B5B459cB9e5562DBCA3Cf2CE13",
    "contractAddress": "0x6e63faf976B3f3287f5DeD4103Ccbb39C5BA6Dc9",
    "transactionIndex": 29,
    "gasUsed": "4308481",
    "logsBloom": "0x
    "blockHash": "0xe900c9328ffb4334ee61f2e65df506cc9dffad1a98f8cea6866f5e8ea3ff8658",
    "transactionHash": "0x3fc8d1c2240e9a055de84c952dd9c7b27cad66b89d3e494f7630d855b1b3c7a8",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 9291323,
        "transactionHash": "0x3fc8d1c2240e9a055de84c952dd9c7b27cad66b89d3e494f7630d855b1b3c7a8",
        "address": "0x6e63faf976B3f3287f5DeD4103Ccbb39C5BA6Dc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000586ebec665dea9b5b459cb9e5562dbca3cf2ce13"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0xe900c9328ffb4334ee61f2e65df506cc9dffad1a98f8cea6866f5e8ea3ff8658"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 9291323,
        "transactionHash": "0x3fc8d1c2240e9a055de84c952dd9c7b27cad66b89d3e494f7630d855b1b3c7a8",
        "address": "0x6e63faf976B3f3287f5DeD4103Ccbb39C5BA6Dc9",
        "topics": [
          "0x21e5668ec8085df78c0955e48cdf5939d94bd27059bd915d1258f6ec278c922d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000014",
        "logIndex": 25,
        "blockHash": "0xe900c9328ffb4334ee61f2e65df506cc9dffad1a98f8cea6866f5e8ea3ff8658"
      }
    ],
    "blockNumber": 9291323,
    "cumulativeGasUsed": "8999758",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x943266dE22A560E3D94F6Bb47bA6A54Ab32568F5",
    "0x2FDB32D2234DDb90e9a3e6561946597457a4cd70"
  ],
  "solcInputHash": "be8e461e30ec69674001fa1e7e5710d7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"floraArmyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"faunaArmyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fieldID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"conqueror\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isGreen\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"defender\",\"type\":\"uint256[]\"}],\"name\":\"FieldState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prefixURI\",\"type\":\"string\"}],\"name\":\"Propose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalArea\",\"type\":\"uint256\"}],\"name\":\"TotalArea\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fieldID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalArea\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"floraWin\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"faunaWin\",\"type\":\"bool\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"propInterval_\",\"type\":\"uint256\"}],\"name\":\"changePropInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seriesName_\",\"type\":\"string\"}],\"name\":\"changeSeriesName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slottingFee_\",\"type\":\"uint256\"}],\"name\":\"changeSlottingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voteInterval_\",\"type\":\"uint256\"}],\"name\":\"changeVoteInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increaseSize\",\"type\":\"uint256\"}],\"name\":\"expand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faunaArmy\",\"outputs\":[{\"internalType\":\"contract ARMY\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fieldID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackerID\",\"type\":\"uint256\"}],\"name\":\"faunaConquer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faunaFieldCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"faunaOnField\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fieldDefender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fieldGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fieldLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floraArmy\",\"outputs\":[{\"internalType\":\"contract ARMY\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fieldID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackerID\",\"type\":\"uint256\"}],\"name\":\"floraConquer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floraFieldCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"floraOnField\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFieldInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"defender\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isFlora\",\"type\":\"bool\"}],\"internalType\":\"struct BattleBase.FieldInfo[]\",\"name\":\"allFieldInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposalInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"prefixURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Battlefield.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fieldID\",\"type\":\"uint256\"}],\"name\":\"getFieldDefender\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fieldID\",\"type\":\"uint256\"}],\"name\":\"getFieldInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"defender\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isFlora\",\"type\":\"bool\"}],\"internalType\":\"struct BattleBase.FieldInfo\",\"name\":\"fieldInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fieldID\",\"type\":\"uint256\"}],\"name\":\"getFieldLeader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFloraField\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"prefixURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefixURI\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fieldID\",\"type\":\"uint256\"}],\"name\":\"retreat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seriesName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slottingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fieldID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Justa Liang\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claimFunds(uint256,address)\":{\"details\":\"Claim the funds from slotting fee\",\"params\":{\"amount\":\"Amount of Ether\",\"receiver\":\"Address of receiver\"}},\"constructor\":{\"details\":\"Set addresses of interactive contracts\",\"params\":{\"faunaArmyAddr\":\"Address of FaunaArmy contract\",\"floraArmyAddr\":\"Address of FloraArmy contract\"}},\"faunaConquer(uint256,uint256)\":{\"params\":{\"attackerID\":\"ID of the fauna attacker minion\",\"fieldID\":\"ID of the field\"}},\"floraConquer(uint256,uint256)\":{\"params\":{\"attackerID\":\"ID of the flora attacker minion\",\"fieldID\":\"ID of the field\"}},\"getAllFieldInfo()\":{\"returns\":{\"allFieldInfo\":\"Info of every field\"}},\"getAllProposalInfo()\":{\"returns\":{\"_0\":\"Details of all proposals\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getFieldDefender(uint256)\":{\"params\":{\"fieldID\":\"ID of the field\"},\"returns\":{\"_0\":\"Array of minion IDs\"}},\"getFieldInfo(uint256)\":{\"params\":{\"fieldID\":\"ID of the field\"},\"returns\":{\"fieldInfo\":\"Leader, defender and side\"}},\"getFieldLeader(uint256)\":{\"params\":{\"fieldID\":\"ID of the field\"},\"returns\":{\"_0\":\"Owner of the first minion\"}},\"getProposalCount()\":{\"returns\":{\"_0\":\"Number of current proposals\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"propose(string)\":{\"params\":{\"prefixURI\":\"Prefix of the URI\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"retreat(uint256)\":{\"params\":{\"fieldID\":\"ID of the field\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vote(uint256,uint256)\":{\"params\":{\"fieldID\":\"ID of the field\",\"proposalID\":\"ID of the proposal\"}}},\"title\":\"Battlefield of fighting for next generation\",\"version\":1},\"userdoc\":{\"events\":{\"FieldState(uint256,address,bool,uint256[])\":{\"notice\":\"Emit when field's state changes\"},\"Propose(address,uint256,string)\":{\"notice\":\"Emit when someone propose\"},\"TotalArea(uint256)\":{\"notice\":\"Emit when total area of battlefield changes\"},\"Vote(uint256,address,uint256,uint256)\":{\"notice\":\"Emit when someone vote behalf of field\"},\"Winner(uint256,address,string,uint256,uint256,uint256,bool,bool)\":{\"notice\":\"Emit the winning proposal's info\"}},\"kind\":\"user\",\"methods\":{\"endVote()\":{\"notice\":\"End the vote state, change medal styles and mint an assembly metadata to winner\"},\"expand(uint256)\":{\"notice\":\"Expand the battlefield and increase it's total area\"},\"faunaArmy()\":{\"notice\":\"Corresponding FaunaArmy contract\"},\"faunaConquer(uint256,uint256)\":{\"notice\":\"Send fauna army to conquer certain field\"},\"faunaFieldCount()\":{\"notice\":\"Number of fields occupied by fauna army\"},\"faunaOnField(uint256)\":{\"notice\":\"If certain fauna minion on field\"},\"fieldDefender(uint256,uint256)\":{\"notice\":\"Defenders on cetain field\"},\"fieldGeneration(uint256)\":{\"notice\":\"Latest generation in which field has voted\"},\"fieldLocked()\":{\"notice\":\"If Battlefield locked, lock for vote, unlock for proposal\"},\"floraArmy()\":{\"notice\":\"Corresponding FloraArmy contract\"},\"floraConquer(uint256,uint256)\":{\"notice\":\"Send flora army to conquer certain field\"},\"floraFieldCount()\":{\"notice\":\"Number of fields occupied by flora army\"},\"floraOnField(uint256)\":{\"notice\":\"If certain flora minion on field\"},\"generation()\":{\"notice\":\"One generation means going through proposal and vote\"},\"getAllFieldInfo()\":{\"notice\":\"Get the every field info \"},\"getAllProposalInfo()\":{\"notice\":\"Get details of all proposals\"},\"getFieldDefender(uint256)\":{\"notice\":\"Get minion IDs on certain field\"},\"getFieldInfo(uint256)\":{\"notice\":\"Get the field info\"},\"getFieldLeader(uint256)\":{\"notice\":\"Get the leader on certain field\"},\"getProposalCount()\":{\"notice\":\"Get number of current proposals\"},\"isFloraField(uint256)\":{\"notice\":\"If field be occupied by flora army \"},\"propInterval()\":{\"notice\":\"Time interval of proposal state\"},\"proposals(uint256)\":{\"notice\":\"All the proposals\"},\"propose(string)\":{\"notice\":\"Propose for new style of medals\"},\"retreat(uint256)\":{\"notice\":\"Retreat from certain field\"},\"seriesName()\":{\"notice\":\"Name of assembly metadata of the medal designs \"},\"slottingFee()\":{\"notice\":\"Slotting fee for making a proposal\"},\"startVote()\":{\"notice\":\"Start the vote state\"},\"totalArea()\":{\"notice\":\"Total area of battlefield\"},\"updateTime()\":{\"notice\":\"Latest time updated for proposal or vote\"},\"vote(uint256,uint256)\":{\"notice\":\"Vote behalf of certain field\"},\"voteInterval()\":{\"notice\":\"Time interval of vote state\"}},\"notice\":\"Define voting system on battlefield\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Battlefield.sol\":\"Battlefield\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/BattleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @notice Operations only for Army contract\\n */\\ninterface ARMY is IERC721Enumerable {\\n    function minionExists(uint) external view returns (bool);\\n    function getMinionInfo(uint) external view returns (address, bool, int, int);\\n    function updateBaseURI(string memory) external;\\n}\\n\\n/**\\n * @title Battle mechanism\\n * @notice Define how to figh on battlefield\\n * @author Justa Liang\\n */\\nabstract contract BattleBase is Ownable {\\n\\n    /// @notice If Battlefield locked, lock for vote, unlock for proposal\\n    bool public fieldLocked;\\n\\n    /// @notice Total area of battlefield\\n    uint public totalArea;\\n\\n    /// @notice Defenders on cetain field\\n    mapping (uint => uint[]) public fieldDefender;\\n\\n    /// @notice If field be occupied by flora army \\n    mapping (uint => bool) public isFloraField;\\n\\n    /// @notice If certain flora minion on field\\n    mapping (uint => bool) public floraOnField;\\n\\n    /// @notice If certain fauna minion on field\\n    mapping (uint => bool) public faunaOnField;\\n\\n    /// @notice Corresponding FloraArmy contract\\n    ARMY public floraArmy;\\n\\n    /// @notice Corresponding FaunaArmy contract\\n    ARMY public faunaArmy;\\n\\n    /// @notice Number of fields occupied by flora army\\n    uint public floraFieldCount;\\n\\n    /// @notice Number of fields occupied by fauna army\\n    uint public faunaFieldCount;\\n\\n    /// @dev Initial power of flora and fauna minions\\n    int private _refPower;\\n\\n    /// @dev Field info for frontend\\n    struct FieldInfo {\\n        address leader;\\n        uint[] defender;\\n        bool isFlora;\\n    }\\n\\n    /// @notice Emit when field's state changes\\n    event FieldState(uint indexed fieldID,\\n                     address indexed conqueror,\\n                     bool indexed isGreen,\\n                     uint[] defender);\\n\\n    /// @notice Emit when total area of battlefield changes\\n    event TotalArea(uint totalArea);\\n\\n    /**\\n     * @dev Set addresses of interactive contracts\\n     * @param floraArmyAddr Address of FloraArmy contract\\n     * @param faunaArmyAddr Address of FaunaArmy contract\\n    */\\n    constructor(address floraArmyAddr, address faunaArmyAddr) {\\n        fieldLocked = false;\\n        totalArea = 20;\\n        _refPower = 1000;\\n        floraArmy = ARMY(floraArmyAddr);\\n        faunaArmy = ARMY(faunaArmyAddr);\\n        floraFieldCount = 0;\\n        faunaFieldCount = 0;\\n\\n        emit TotalArea(totalArea);\\n    }\\n\\n    /**\\n     * @notice Expand the battlefield and increase it's total area\\n    */\\n    function expand(uint increaseSize) external onlyOwner {\\n        totalArea += increaseSize;\\n        require(\\n            totalArea < floraArmy.totalSupply() + faunaArmy.totalSupply(),\\n            \\\"Battlefield: no need for expansion\\\");\\n\\n        emit TotalArea(totalArea);\\n    }\\n\\n    /**\\n     * @notice Get minion IDs on certain field\\n     * @param fieldID ID of the field\\n     * @return Array of minion IDs\\n    */ \\n    function getFieldDefender(uint fieldID) public view returns (uint[] memory) {\\n        return fieldDefender[fieldID];\\n    }\\n\\n    /**\\n     * @notice Get the leader on certain field\\n     * @param fieldID ID of the field\\n     * @return Owner of the first minion\\n    */ \\n    function getFieldLeader(uint fieldID) public view returns (address) {\\n        uint[] memory defender = fieldDefender[fieldID];\\n        if (defender.length == 0) {\\n            return address(0);\\n        }\\n        else if (isFloraField[fieldID]) {\\n            if (floraArmy.minionExists(defender[0])) {\\n                return floraArmy.ownerOf(defender[0]);\\n            }\\n            else {\\n                return address(0);\\n            }\\n        }\\n        else {\\n            if (faunaArmy.minionExists(defender[0])) {\\n                return faunaArmy.ownerOf(defender[0]);\\n            }\\n            else {\\n                return address(0);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the field info\\n     * @param fieldID ID of the field\\n     * @return fieldInfo Leader, defender and side\\n    */ \\n    function getFieldInfo(uint fieldID) public view returns (FieldInfo memory fieldInfo) {\\n        fieldInfo.leader = getFieldLeader(fieldID);\\n        if (fieldInfo.leader != address(0)) {\\n            fieldInfo.defender = getFieldDefender(fieldID);\\n            fieldInfo.isFlora = isFloraField[fieldID];\\n        }\\n        else {\\n            delete fieldInfo;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the every field info \\n     * @return allFieldInfo Info of every field\\n    */ \\n    function getAllFieldInfo() external view returns (FieldInfo[] memory allFieldInfo) {\\n        allFieldInfo = new FieldInfo[](totalArea);\\n        for (uint fid = 0; fid < totalArea; fid++) {\\n            allFieldInfo[fid] = getFieldInfo(fid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send flora army to conquer certain field\\n     * @param fieldID ID of the field\\n     * @param attackerID ID of the flora attacker minion\\n    */ \\n    function floraConquer(uint fieldID, uint attackerID) external preCheck(fieldID) {\\n        require(\\n            !floraOnField[attackerID],\\n            \\\"Battlefield: the flora minion already on field\\\");\\n        require(\\n            floraArmy.ownerOf(attackerID) == msg.sender,\\n            \\\"Battlefield: not the commander of the flora minion\\\");\\n        uint[] memory defender = fieldDefender[fieldID];\\n        if (defender.length > 0) {\\n            uint defenderID = defender[0];\\n            if (isFloraField[fieldID]) {\\n                _fight(floraArmy, attackerID, floraArmy, defenderID);\\n                floraOnField[defenderID] = false;\\n            }\\n            else {\\n                _fight(floraArmy, attackerID, faunaArmy, defenderID);\\n                faunaOnField[defenderID] = false;\\n                faunaFieldCount--;\\n                floraFieldCount++;\\n            }\\n            fieldDefender[fieldID][0] = attackerID;\\n        }\\n        else {\\n            fieldDefender[fieldID].push(attackerID);\\n            floraFieldCount++;\\n        }\\n        floraOnField[attackerID] = true;\\n        isFloraField[fieldID] = true;\\n\\n        emit FieldState(fieldID, msg.sender, true, fieldDefender[fieldID]);\\n    }\\n\\n    /**\\n     * @notice Send fauna army to conquer certain field\\n     * @param fieldID ID of the field\\n     * @param attackerID ID of the fauna attacker minion\\n    */ \\n    function faunaConquer(uint fieldID, uint attackerID) external preCheck(fieldID) {\\n        require(\\n            !faunaOnField[attackerID],\\n            \\\"Battlefield: the fauna minion already on field\\\");\\n        require(\\n            faunaArmy.ownerOf(attackerID) == msg.sender,\\n            \\\"Battlefield: not the commander of the fauna minion\\\");\\n        uint[] memory defender = fieldDefender[fieldID];\\n        if (defender.length > 0) {\\n            uint defenderID = defender[0];\\n            if (isFloraField[fieldID]) {\\n                _fight(faunaArmy, attackerID, floraArmy, defenderID);\\n                floraOnField[defenderID] = false;\\n                floraFieldCount--;\\n                faunaFieldCount++;\\n            }\\n            else {\\n                _fight(faunaArmy, attackerID, faunaArmy, defenderID);\\n                faunaOnField[defenderID] = false;\\n            } \\n            fieldDefender[fieldID][0] = attackerID;\\n        }\\n        else {\\n            fieldDefender[fieldID].push(attackerID);\\n            faunaFieldCount++;            \\n        }\\n        faunaOnField[attackerID] = true;\\n        isFloraField[fieldID] = false;\\n\\n        emit FieldState(fieldID, msg.sender, false, fieldDefender[fieldID]);\\n    }\\n\\n    /**\\n     * @notice Retreat from certain field\\n     * @param fieldID ID of the field\\n    */    \\n    function retreat(uint fieldID) external {\\n        uint[] memory defender = fieldDefender[fieldID];\\n        require(\\n            defender.length > 0,\\n            \\\"Battlefield: retreat from empty field\\\");\\n        uint defenderID = defender[0];\\n        if (isFloraField[fieldID]) {\\n            require(\\n                floraArmy.ownerOf(defenderID) == msg.sender,\\n                \\\"Battlefield: not leader\\\");\\n            floraOnField[defenderID] = false;\\n        }\\n        else {\\n            require(\\n                faunaArmy.ownerOf(defenderID) == msg.sender,\\n                \\\"Battlefield: not leader\\\");\\n            faunaOnField[defenderID] = false;\\n        }\\n        delete fieldDefender[fieldID];\\n\\n        emit FieldState(fieldID, address(0), isFloraField[fieldID], fieldDefender[fieldID]);\\n    }\\n\\n    /**\\n     * @dev Check if locked or out of range\\n     * @param fieldID ID of the field\\n    */\\n    modifier preCheck(uint fieldID) {\\n        require(\\n            !fieldLocked,\\n            \\\"Battlefield: battlefield is locked now\\\");\\n        require(\\n            fieldID < totalArea,\\n            \\\"Battlefield: field out of range\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Determine win or not, cancel tx if lose\\n     * @param attackerSide Which side of attacker army\\n     * @param attackerID ID of attacker minion\\n     * @param defenderSide Which side of defender army\\n     * @param defenderID ID of defender minion\\n    */\\n    function _fight(ARMY attackerSide, uint attackerID,\\n                    ARMY defenderSide, uint defenderID\\n                    ) private view {\\n        if (defenderSide.minionExists(defenderID)) {\\n            (,bool aArmed,,int aPower) = attackerSide.getMinionInfo(attackerID);\\n            (,bool dArmed,,int dPower) = defenderSide.getMinionInfo(defenderID);\\n            require(aArmed, \\\"Battlefield: attacker should be armed\\\");\\n            require(!dArmed || aPower > dPower, \\\"Battlefield: defeated\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x4fe32d073dcdd56b0039607815a474f7238ff0b7bdc6772c5d57b0a94828f78c\",\"license\":\"MIT\"},\"contracts/Battlefield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"./BattleBase.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Battlefield of fighting for next generation\\r\\n * @notice Define voting system on battlefield\\r\\n * @author Justa Liang\\r\\n */\\r\\ncontract Battlefield is BattleBase, ERC721URIStorage {\\r\\n\\r\\n    /// @dev Proposal contents\\r\\n    struct Proposal {\\r\\n        address proposer;\\r\\n        string prefixURI;\\r\\n        uint voteCount;\\r\\n    }\\r\\n\\r\\n    /// @notice All the proposals\\r\\n    Proposal[] public proposals;\\r\\n\\r\\n    /// @notice Latest generation in which field has voted\\r\\n    mapping (uint => uint) public fieldGeneration;\\r\\n\\r\\n    /// @notice Latest time updated for proposal or vote\\r\\n    uint public updateTime;\\r\\n\\r\\n    /// @notice Time interval of proposal state\\r\\n    uint public propInterval;\\r\\n\\r\\n    /// @notice Time interval of vote state\\r\\n    uint public voteInterval;\\r\\n\\r\\n    /// @notice One generation means going through proposal and vote\\r\\n    uint public generation;\\r\\n\\r\\n    /// @notice Name of assembly metadata of the medal designs \\r\\n    string public seriesName;\\r\\n\\r\\n    /// @notice Slotting fee for making a proposal\\r\\n    uint public slottingFee;\\r\\n\\r\\n    /// @notice Emit when someone propose\\r\\n    event Propose(\\r\\n        address indexed proposer,\\r\\n        uint proposalID,\\r\\n        string prefixURI\\r\\n    );\\r\\n\\r\\n    /// @notice Emit when someone vote behalf of field\\r\\n    event Vote(\\r\\n        uint indexed fieldID,\\r\\n        address indexed voter,\\r\\n        uint indexed proposalID,\\r\\n        uint voteCount\\r\\n    );\\r\\n\\r\\n    /// @notice Emit the winning proposal's info\\r\\n    event Winner(\\r\\n        uint indexed generation,\\r\\n        address indexed winner,\\r\\n        string tokenURI,\\r\\n        uint proposalCount,\\r\\n        uint voteCount,\\r\\n        uint totalArea,\\r\\n        bool floraWin,\\r\\n        bool faunaWin\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Set addresses of interactive contracts\\r\\n     * @param floraArmyAddr Address of FloraArmy contract\\r\\n     * @param faunaArmyAddr Address of FaunaArmy contract\\r\\n    */\\r\\n    constructor(address floraArmyAddr, address faunaArmyAddr)\\r\\n        BattleBase(floraArmyAddr, faunaArmyAddr)\\r\\n        ERC721(\\\"Flora&Fauna Battlefield\\\", \\\"F&F-BTF\\\")\\r\\n    {\\r\\n        generation = 1;\\r\\n        propInterval = 30 days;\\r\\n        voteInterval = 5 days;\\r\\n        seriesName = \\\"series.json\\\";\\r\\n        slottingFee = 1e12 wei;\\r\\n        updateTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get number of current proposals\\r\\n     * @return Number of current proposals\\r\\n    */\\r\\n    function getProposalCount() external view returns (uint) {\\r\\n        return proposals.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get details of all proposals\\r\\n     * @return Details of all proposals\\r\\n    */\\r\\n    function getAllProposalInfo() external view\\r\\n                returns (Proposal[] memory) {\\r\\n        return proposals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Propose for new style of medals\\r\\n     * @param prefixURI Prefix of the URI\\r\\n    */\\r\\n    function propose(string calldata prefixURI) payable external propState {\\r\\n        require(\\r\\n            msg.value >= slottingFee,\\r\\n            \\\"Battlefield: not enough slotting fee\\\");\\r\\n        proposals.push(Proposal(msg.sender, prefixURI, 0));\\r\\n\\r\\n        emit Propose(msg.sender, proposals.length-1, prefixURI);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Start the vote state\\r\\n    */\\r\\n    function startVote() external propState {\\r\\n        require(\\r\\n            proposals.length > 1,\\r\\n            \\\"Battlefield: not enough proposals\\\");\\r\\n        uint currentTime = block.timestamp;\\r\\n        require(\\r\\n            currentTime >= updateTime + propInterval,\\r\\n            \\\"Battlefield: not yet to start vote\\\");\\r\\n        updateTime = currentTime;\\r\\n        fieldLocked = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Vote behalf of certain field\\r\\n     * @param fieldID ID of the field\\r\\n     * @param proposalID ID of the proposal\\r\\n    */\\r\\n    function vote(uint fieldID, uint proposalID) external voteState {\\r\\n        require(\\r\\n            fieldGeneration[fieldID] < generation,\\r\\n            \\\"Battlefield: field has voted in this generation\\\");\\r\\n        uint[] memory defender = fieldDefender[fieldID];\\r\\n        require(\\r\\n            defender.length > 0,\\r\\n            \\\"Battlefield: empty field can't vote\\\");\\r\\n        if (isFloraField[fieldID]) {\\r\\n            require(\\r\\n                floraArmy.ownerOf(defender[0]) == msg.sender,\\r\\n                \\\"Battlefield: not leader\\\");\\r\\n            require(\\r\\n                floraFieldCount >= faunaFieldCount,\\r\\n                \\\"Battlefield: you're loser side\\\");\\r\\n        }\\r\\n        else {\\r\\n            require(\\r\\n                faunaArmy.ownerOf(defender[0]) == msg.sender,\\r\\n                \\\"Battlefield: not leader\\\");\\r\\n            require(\\r\\n                faunaFieldCount >= floraFieldCount,\\r\\n                \\\"Battlefield: you're loser side\\\");\\r\\n\\r\\n        }\\r\\n        Proposal storage target = proposals[proposalID];\\r\\n        target.voteCount++;\\r\\n        fieldGeneration[fieldID] = generation;\\r\\n\\r\\n        emit Vote(fieldID, msg.sender, proposalID, target.voteCount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice End the vote state, change medal styles and mint an assembly metadata to winner\\r\\n    */\\r\\n    function endVote() external voteState {\\r\\n        uint currentTime = block.timestamp;\\r\\n        require(\\r\\n            currentTime >= updateTime + voteInterval,\\r\\n            \\\"Battlefield: not yet to end vote\\\");\\r\\n        updateTime = currentTime;\\r\\n        \\r\\n        uint maxVote = 0;\\r\\n        uint maxIdx = 0;\\r\\n        for (uint i = 0; i < proposals.length; i++) {\\r\\n            if (proposals[i].voteCount > maxVote) {\\r\\n                maxVote = proposals[i].voteCount;\\r\\n                maxIdx = i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        Proposal memory winning = proposals[maxIdx];\\r\\n\\r\\n        bool floraWin = false;\\r\\n        bool faunaWin = false;\\r\\n        if (floraFieldCount >= faunaFieldCount) {\\r\\n            floraArmy.updateBaseURI(winning.prefixURI);\\r\\n            floraWin = true;\\r\\n        }\\r\\n        if (faunaFieldCount >= floraFieldCount) {\\r\\n            faunaArmy.updateBaseURI(winning.prefixURI);\\r\\n            faunaWin = true;\\r\\n        }\\r\\n\\r\\n        _safeMint(winning.proposer, generation);\\r\\n        _setTokenURI(generation, string(abi.encodePacked(winning.prefixURI, seriesName)));\\r\\n\\r\\n        delete proposals;\\r\\n        fieldLocked = false;\\r\\n\\r\\n        emit Winner(generation,\\r\\n                    winning.proposer,\\r\\n                    tokenURI(generation),\\r\\n                    proposals.length,\\r\\n                    winning.voteCount,\\r\\n                    totalArea,\\r\\n                    floraWin,\\r\\n                    faunaWin);\\r\\n        generation++;\\r\\n    }\\r\\n\\r\\n    /// @dev Check if under vote state\\r\\n    modifier voteState() {\\r\\n        require(fieldLocked, \\\"Battlefield: not in proposal state\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Check if under proposal state\\r\\n    modifier propState() {\\r\\n        require(!fieldLocked, \\\"Battlefield: not in vote state\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim the funds from slotting fee\\r\\n     * @param amount Amount of Ether\\r\\n     * @param receiver Address of receiver\\r\\n    */    \\r\\n    function claimFunds(uint amount, address payable receiver) external onlyOwner {\\r\\n        receiver.transfer(amount);\\r\\n    } \\r\\n\\r\\n    function changePropInterval(uint propInterval_) external onlyOwner {\\r\\n        propInterval = propInterval_;\\r\\n    }\\r\\n\\r\\n    function changeVoteInterval(uint voteInterval_) external onlyOwner {\\r\\n        voteInterval = voteInterval_;\\r\\n    }\\r\\n\\r\\n    function changeSlottingFee(uint slottingFee_) external onlyOwner {\\r\\n        slottingFee = slottingFee_;\\r\\n    }\\r\\n\\r\\n    function changeSeriesName(string calldata seriesName_) external onlyOwner {\\r\\n        seriesName = seriesName_;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8d3ed258ec7b619d1aa869eef73ddfbecb8dc3e4c4043eec2f4ad7f886e9d5be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Justa Liang",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claimFunds(uint256,address)": {
        "details": "Claim the funds from slotting fee",
        "params": {
          "amount": "Amount of Ether",
          "receiver": "Address of receiver"
        }
      },
      "constructor": {
        "details": "Set addresses of interactive contracts",
        "params": {
          "faunaArmyAddr": "Address of FaunaArmy contract",
          "floraArmyAddr": "Address of FloraArmy contract"
        }
      },
      "faunaConquer(uint256,uint256)": {
        "params": {
          "attackerID": "ID of the fauna attacker minion",
          "fieldID": "ID of the field"
        }
      },
      "floraConquer(uint256,uint256)": {
        "params": {
          "attackerID": "ID of the flora attacker minion",
          "fieldID": "ID of the field"
        }
      },
      "getAllFieldInfo()": {
        "returns": {
          "allFieldInfo": "Info of every field"
        }
      },
      "getAllProposalInfo()": {
        "returns": {
          "_0": "Details of all proposals"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getFieldDefender(uint256)": {
        "params": {
          "fieldID": "ID of the field"
        },
        "returns": {
          "_0": "Array of minion IDs"
        }
      },
      "getFieldInfo(uint256)": {
        "params": {
          "fieldID": "ID of the field"
        },
        "returns": {
          "fieldInfo": "Leader, defender and side"
        }
      },
      "getFieldLeader(uint256)": {
        "params": {
          "fieldID": "ID of the field"
        },
        "returns": {
          "_0": "Owner of the first minion"
        }
      },
      "getProposalCount()": {
        "returns": {
          "_0": "Number of current proposals"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "propose(string)": {
        "params": {
          "prefixURI": "Prefix of the URI"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "retreat(uint256)": {
        "params": {
          "fieldID": "ID of the field"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vote(uint256,uint256)": {
        "params": {
          "fieldID": "ID of the field",
          "proposalID": "ID of the proposal"
        }
      }
    },
    "title": "Battlefield of fighting for next generation",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FieldState(uint256,address,bool,uint256[])": {
        "notice": "Emit when field's state changes"
      },
      "Propose(address,uint256,string)": {
        "notice": "Emit when someone propose"
      },
      "TotalArea(uint256)": {
        "notice": "Emit when total area of battlefield changes"
      },
      "Vote(uint256,address,uint256,uint256)": {
        "notice": "Emit when someone vote behalf of field"
      },
      "Winner(uint256,address,string,uint256,uint256,uint256,bool,bool)": {
        "notice": "Emit the winning proposal's info"
      }
    },
    "kind": "user",
    "methods": {
      "endVote()": {
        "notice": "End the vote state, change medal styles and mint an assembly metadata to winner"
      },
      "expand(uint256)": {
        "notice": "Expand the battlefield and increase it's total area"
      },
      "faunaArmy()": {
        "notice": "Corresponding FaunaArmy contract"
      },
      "faunaConquer(uint256,uint256)": {
        "notice": "Send fauna army to conquer certain field"
      },
      "faunaFieldCount()": {
        "notice": "Number of fields occupied by fauna army"
      },
      "faunaOnField(uint256)": {
        "notice": "If certain fauna minion on field"
      },
      "fieldDefender(uint256,uint256)": {
        "notice": "Defenders on cetain field"
      },
      "fieldGeneration(uint256)": {
        "notice": "Latest generation in which field has voted"
      },
      "fieldLocked()": {
        "notice": "If Battlefield locked, lock for vote, unlock for proposal"
      },
      "floraArmy()": {
        "notice": "Corresponding FloraArmy contract"
      },
      "floraConquer(uint256,uint256)": {
        "notice": "Send flora army to conquer certain field"
      },
      "floraFieldCount()": {
        "notice": "Number of fields occupied by flora army"
      },
      "floraOnField(uint256)": {
        "notice": "If certain flora minion on field"
      },
      "generation()": {
        "notice": "One generation means going through proposal and vote"
      },
      "getAllFieldInfo()": {
        "notice": "Get the every field info "
      },
      "getAllProposalInfo()": {
        "notice": "Get details of all proposals"
      },
      "getFieldDefender(uint256)": {
        "notice": "Get minion IDs on certain field"
      },
      "getFieldInfo(uint256)": {
        "notice": "Get the field info"
      },
      "getFieldLeader(uint256)": {
        "notice": "Get the leader on certain field"
      },
      "getProposalCount()": {
        "notice": "Get number of current proposals"
      },
      "isFloraField(uint256)": {
        "notice": "If field be occupied by flora army "
      },
      "propInterval()": {
        "notice": "Time interval of proposal state"
      },
      "proposals(uint256)": {
        "notice": "All the proposals"
      },
      "propose(string)": {
        "notice": "Propose for new style of medals"
      },
      "retreat(uint256)": {
        "notice": "Retreat from certain field"
      },
      "seriesName()": {
        "notice": "Name of assembly metadata of the medal designs "
      },
      "slottingFee()": {
        "notice": "Slotting fee for making a proposal"
      },
      "startVote()": {
        "notice": "Start the vote state"
      },
      "totalArea()": {
        "notice": "Total area of battlefield"
      },
      "updateTime()": {
        "notice": "Latest time updated for proposal or vote"
      },
      "vote(uint256,uint256)": {
        "notice": "Vote behalf of certain field"
      },
      "voteInterval()": {
        "notice": "Time interval of vote state"
      }
    },
    "notice": "Define voting system on battlefield",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 110,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3785,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "fieldLocked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3788,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "totalArea",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3794,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "fieldDefender",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3799,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "isFloraField",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3804,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "floraOnField",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3809,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "faunaOnField",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3813,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "floraArmy",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ARMY)3779"
      },
      {
        "astId": 3817,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "faunaArmy",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ARMY)3779"
      },
      {
        "astId": 3820,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "floraFieldCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3823,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "faunaFieldCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3826,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "_refPower",
        "offset": 0,
        "slot": "10",
        "type": "t_int256"
      },
      {
        "astId": 881,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "_name",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 883,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "_symbol",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "_owners",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 891,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "_balances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 895,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 901,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2156,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4549,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "proposals",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(Proposal)4544_storage)dyn_storage"
      },
      {
        "astId": 4554,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "fieldGeneration",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4557,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "updateTime",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 4560,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "propInterval",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 4563,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "voteInterval",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 4566,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "generation",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 4569,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "seriesName",
        "offset": 0,
        "slot": "24",
        "type": "t_string_storage"
      },
      {
        "astId": 4572,
        "contract": "contracts/Battlefield.sol:Battlefield",
        "label": "slottingFee",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)4544_storage)dyn_storage": {
        "base": "t_struct(Proposal)4544_storage",
        "encoding": "dynamic_array",
        "label": "struct Battlefield.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ARMY)3779": {
        "encoding": "inplace",
        "label": "contract ARMY",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)4544_storage": {
        "encoding": "inplace",
        "label": "struct Battlefield.Proposal",
        "members": [
          {
            "astId": 4539,
            "contract": "contracts/Battlefield.sol:Battlefield",
            "label": "proposer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4541,
            "contract": "contracts/Battlefield.sol:Battlefield",
            "label": "prefixURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4543,
            "contract": "contracts/Battlefield.sol:Battlefield",
            "label": "voteCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}