{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "_initialAnswer",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startedAt",
          "type": "uint256"
        }
      ],
      "name": "updateRoundData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x423a9d35f5a6c0d076903a4a21f1de7e318f129d24bd0d3d44c1db3292d68d4e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "440919",
    "logsBloom": "0x
    "blockHash": "0x7dc7decd1b9d3e66c78c55635f5901d46c9b9fdc4acf38000216da0e296df596",
    "transactionHash": "0x423a9d35f5a6c0d076903a4a21f1de7e318f129d24bd0d3d44c1db3292d68d4e",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "440919",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    40000000000
  ],
  "solcInputHash": "6a24e82fa8ad1c958465dc101e3a2c14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"MockV3Aggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MockV3Aggregator.sol\":\"MockV3Aggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\",\"keccak256\":\"0x1a5dc81544a6479f64437a8aca22c869769dd54ee3522c7ef5ebae0d329a28f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\",\"keccak256\":\"0xe8f8d98b515366730824d24269c7267eee7f0288cf737db8659acbb0c751eb53\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"contracts/mock/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MockV3Aggregator\\r\\n * @notice Based on the FluxAggregator contract\\r\\n * @notice Use this contract when you need to test\\r\\n * other contract's ability to read data from an\\r\\n * aggregator contract, but how the aggregator got\\r\\n * its answer is unimportant\\r\\n */\\r\\ncontract MockV3Aggregator is AggregatorV2V3Interface {\\r\\n  uint256 constant public override version = 0;\\r\\n\\r\\n  uint8 public override decimals;\\r\\n  int256 public override latestAnswer;\\r\\n  uint256 public override latestTimestamp;\\r\\n  uint256 public override latestRound;\\r\\n\\r\\n  mapping(uint256 => int256) public override getAnswer;\\r\\n  mapping(uint256 => uint256) public override getTimestamp;\\r\\n  mapping(uint256 => uint256) private getStartedAt;\\r\\n\\r\\n  constructor(\\r\\n    uint8 _decimals,\\r\\n    int256 _initialAnswer\\r\\n  ) {\\r\\n    decimals = _decimals;\\r\\n    updateAnswer(_initialAnswer);\\r\\n  }\\r\\n\\r\\n  function updateAnswer(\\r\\n    int256 _answer\\r\\n  ) public {\\r\\n    latestAnswer = _answer;\\r\\n    latestTimestamp = block.timestamp;\\r\\n    latestRound++;\\r\\n    getAnswer[latestRound] = _answer;\\r\\n    getTimestamp[latestRound] = block.timestamp;\\r\\n    getStartedAt[latestRound] = block.timestamp;\\r\\n  }\\r\\n\\r\\n  function updateRoundData(\\r\\n    uint80 _roundId,\\r\\n    int256 _answer,\\r\\n    uint256 _timestamp,\\r\\n    uint256 _startedAt\\r\\n  ) public {\\r\\n    latestRound = _roundId;\\r\\n    latestAnswer = _answer;\\r\\n    latestTimestamp = _timestamp;\\r\\n    getAnswer[latestRound] = _answer;\\r\\n    getTimestamp[latestRound] = _timestamp;\\r\\n    getStartedAt[latestRound] = _startedAt;\\r\\n  }\\r\\n\\r\\n  function getRoundData(uint80 _roundId)\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    )\\r\\n  {\\r\\n    return (\\r\\n      _roundId,\\r\\n      getAnswer[_roundId],\\r\\n      getStartedAt[_roundId],\\r\\n      getTimestamp[_roundId],\\r\\n      _roundId\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    )\\r\\n  {\\r\\n    return (\\r\\n      uint80(latestRound),\\r\\n      getAnswer[latestRound],\\r\\n      getStartedAt[latestRound],\\r\\n      getTimestamp[latestRound],\\r\\n      uint80(latestRound)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function description()\\r\\n    external\\r\\n    pure\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return \\\"v0.8/tests/MockV3Aggregator.sol\\\";\\r\\n  }\\r\\n}\\r\\n\\r\\n// MockOracle\\r\\n// Function signatures, event signatures, log topics\\r\\n\",\"keccak256\":\"0x6aa9d3ecb9f0b21a9db40dbff746f10284e3b85aa5ddabfc6a683f0aea26348a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161052c38038061052c83398101604081905261002f916100a4565b6000805460ff191660ff84161790556100478161004e565b50506100fd565b60018190554260025560038054906000610067836100d6565b9091555050600380546000908152600460209081526040808320949094558254825260058152838220429081905592548252600690529190912055565b600080604083850312156100b6578182fd5b825160ff811681146100c6578283fd5b6020939093015192949293505050565b60006000198214156100f657634e487b7160e01b81526011600452602481fd5b5060010190565b6104208061010c6000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c8063313ce567146100a95780634aa2011f146100cd57806350d25bcd1461012757806354fd4d501461013e578063668a0f02146101465780637284e4161461014f5780638205bf6a1461018e5780639a6fc8f514610197578063a87a20ce1461020f578063b5ab58dc14610222578063b633620c14610242578063feaf968c14610262575b600080fd5b6000546100b69060ff1681565b60405160ff90911681526020015b60405180910390f35b6101256100db366004610338565b6001600160501b0390931660038181556001849055600283905560009182526004602090815260408084209590955581548352600581528483209390935554815260069091522055565b005b61013060015481565b6040519081526020016100c4565b610130600081565b61013060035481565b604080518082018252601f81527f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00602082015290516100c49190610370565b61013060025481565b6101db6101a5366004610317565b6001600160501b038116600090815260046020908152604080832054600683528184205460059093529220549293919290918490565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100c4565b61012561021d3660046102ff565b61028d565b6101306102303660046102ff565b60046020526000908152604090205481565b6101306102503660046102ff565b60056020526000908152604090205481565b60035460008181526004602090815260408083205460068352818420546005909352922054836101db565b600181905542600255600380549060006102a6836103c3565b9091555050600380546000908152600460209081526040808320949094558254825260058152838220429081905592548252600690529190912055565b80356001600160501b03811681146102fa57600080fd5b919050565b600060208284031215610310578081fd5b5035919050565b600060208284031215610328578081fd5b610331826102e3565b9392505050565b6000806000806080858703121561034d578283fd5b610356856102e3565b966020860135965060408601359560600135945092505050565b6000602080835283518082850152825b8181101561039c57858101830151858201604001528201610380565b818111156103ad5783604083870101525b50601f01601f1916929092016040019392505050565b60006000198214156103e357634e487b7160e01b81526011600452602481fd5b506001019056fea26469706673582212209e5decbcef463301de593d849efa74143db8cf9efca69dc6f981db3dc22f397464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a45760003560e01c8063313ce567146100a95780634aa2011f146100cd57806350d25bcd1461012757806354fd4d501461013e578063668a0f02146101465780637284e4161461014f5780638205bf6a1461018e5780639a6fc8f514610197578063a87a20ce1461020f578063b5ab58dc14610222578063b633620c14610242578063feaf968c14610262575b600080fd5b6000546100b69060ff1681565b60405160ff90911681526020015b60405180910390f35b6101256100db366004610338565b6001600160501b0390931660038181556001849055600283905560009182526004602090815260408084209590955581548352600581528483209390935554815260069091522055565b005b61013060015481565b6040519081526020016100c4565b610130600081565b61013060035481565b604080518082018252601f81527f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00602082015290516100c49190610370565b61013060025481565b6101db6101a5366004610317565b6001600160501b038116600090815260046020908152604080832054600683528184205460059093529220549293919290918490565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100c4565b61012561021d3660046102ff565b61028d565b6101306102303660046102ff565b60046020526000908152604090205481565b6101306102503660046102ff565b60056020526000908152604090205481565b60035460008181526004602090815260408083205460068352818420546005909352922054836101db565b600181905542600255600380549060006102a6836103c3565b9091555050600380546000908152600460209081526040808320949094558254825260058152838220429081905592548252600690529190912055565b80356001600160501b03811681146102fa57600080fd5b919050565b600060208284031215610310578081fd5b5035919050565b600060208284031215610328578081fd5b610331826102e3565b9392505050565b6000806000806080858703121561034d578283fd5b610356856102e3565b966020860135965060408601359560600135945092505050565b6000602080835283518082850152825b8181101561039c57858101830151858201604001528201610380565b818111156103ad5783604083870101525b50601f01601f1916929092016040019392505050565b60006000198214156103e357634e487b7160e01b81526011600452602481fd5b506001019056fea26469706673582212209e5decbcef463301de593d849efa74143db8cf9efca69dc6f981db3dc22f397464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "MockV3Aggregator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5838,
        "contract": "contracts/mock/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "decimals",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5841,
        "contract": "contracts/mock/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestAnswer",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 5844,
        "contract": "contracts/mock/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5847,
        "contract": "contracts/mock/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestRound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5852,
        "contract": "contracts/mock/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getAnswer",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 5857,
        "contract": "contracts/mock/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5861,
        "contract": "contracts/mock/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getStartedAt",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}