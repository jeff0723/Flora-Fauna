{
  "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ensRegistryAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initEnhancer",
          "type": "uint256"
        },
        {
          "internalType": "int256[5]",
          "name": "powerLevels",
          "type": "int256[5]"
        },
        {
          "internalType": "string[5]",
          "name": "jsonNames",
          "type": "string[5]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "branchAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "armed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "environmentFactor",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "power",
          "type": "int256"
        }
      ],
      "name": "MinionState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "arm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "boost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enhancerContract",
      "outputs": [
        {
          "internalType": "contract ENHR",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "commander",
          "type": "address"
        }
      ],
      "name": "getMinionIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "minionIDs",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "getMinionInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "getMinionProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "branch",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "armed",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "power",
              "type": "int256"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            }
          ],
          "internalType": "struct ArmyBase.MinionProfile",
          "name": "profile",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "minionIDs",
          "type": "uint256[]"
        }
      ],
      "name": "getTeamInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "branchAddr",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "armed",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "envFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "power",
              "type": "int256"
            }
          ],
          "internalType": "struct ArmyBase.Minion[]",
          "name": "teamInfo",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "grant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "heal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initPower",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "liberate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "minionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "minions",
      "outputs": [
        {
          "internalType": "address",
          "name": "branchAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "armed",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "envFactor",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "power",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "population",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rankContract",
      "outputs": [
        {
          "internalType": "contract RANK",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "branchHash",
          "type": "bytes32"
        }
      ],
      "name": "recruit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serialNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "train",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2a7aa8fd6ae1589c98df014db793bb3f358c2c95114db2a4196cc364a1bc6fc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
    "transactionIndex": 0,
    "gasUsed": "4768462",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000080000000000000000000000200000000000000000000000000000000000000000000000000040100000000000000000000000a000000000001000000000000000000000000000000000000020000000000000100000800000000000200000000000410000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000800000000002000000200000000000000000000000002000000000000000000020000001000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x34ecbcd0164e962a2f3459f92eba13f613e4e31169bc77566589a77c4d544d8d",
    "transactionHash": "0xa2a7aa8fd6ae1589c98df014db793bb3f358c2c95114db2a4196cc364a1bc6fc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0xa2a7aa8fd6ae1589c98df014db793bb3f358c2c95114db2a4196cc364a1bc6fc",
        "address": "0x8dAF17A20c9DBA35f005b6324F493785D239719d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b7f8bc63bbcad18155201308c8f3540b07f84f5e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x34ecbcd0164e962a2f3459f92eba13f613e4e31169bc77566589a77c4d544d8d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0xa2a7aa8fd6ae1589c98df014db793bb3f358c2c95114db2a4196cc364a1bc6fc",
        "address": "0x8dAF17A20c9DBA35f005b6324F493785D239719d",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x00000000000000000000000000000000000000622b5afc8cc3deac5953240000",
        "logIndex": 1,
        "blockHash": "0x34ecbcd0164e962a2f3459f92eba13f613e4e31169bc77566589a77c4d544d8d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0xa2a7aa8fd6ae1589c98df014db793bb3f358c2c95114db2a4196cc364a1bc6fc",
        "address": "0x3Ca8f9C04c7e3E1624Ac2008F92f6F366A869444",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b7f8bc63bbcad18155201308c8f3540b07f84f5e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x34ecbcd0164e962a2f3459f92eba13f613e4e31169bc77566589a77c4d544d8d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0xa2a7aa8fd6ae1589c98df014db793bb3f358c2c95114db2a4196cc364a1bc6fc",
        "address": "0x3Ca8f9C04c7e3E1624Ac2008F92f6F366A869444",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b7f8bc63bbcad18155201308c8f3540b07f84f5e",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x34ecbcd0164e962a2f3459f92eba13f613e4e31169bc77566589a77c4d544d8d"
      }
    ],
    "blockNumber": 12,
    "cumulativeGasUsed": "4768462",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    7777777777777,
    [
      2000,
      1500,
      1300,
      1100,
      0
    ],
    [
      "fauna_5.json",
      "fauna_4.json",
      "fauna_3.json",
      "fauna_2.json",
      "fauna_1.json"
    ]
  ],
  "solcInputHash": "41a7aa6c2396b908af18b6ea5b363b11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistryAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initEnhancer\",\"type\":\"uint256\"},{\"internalType\":\"int256[5]\",\"name\":\"powerLevels\",\"type\":\"int256[5]\"},{\"internalType\":\"string[5]\",\"name\":\"jsonNames\",\"type\":\"string[5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"branchAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"armed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"environmentFactor\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"}],\"name\":\"MinionState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"arm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enhancerContract\",\"outputs\":[{\"internalType\":\"contract ENHR\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"commander\",\"type\":\"address\"}],\"name\":\"getMinionIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minionIDs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"getMinionInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"getMinionProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"branch\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"armed\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct ArmyBase.MinionProfile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minionIDs\",\"type\":\"uint256[]\"}],\"name\":\"getTeamInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"branchAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"armed\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"envFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"}],\"internalType\":\"struct ArmyBase.Minion[]\",\"name\":\"teamInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"heal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPower\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"liberate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"minionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"branchAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"armed\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"envFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"population\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rankContract\",\"outputs\":[{\"internalType\":\"contract RANK\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"branchHash\",\"type\":\"bytes32\"}],\"name\":\"recruit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serialNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"train\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Justa Liang\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"arm(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"boost(uint256)\":{\"details\":\"Commander cost Hemoglobin\",\"params\":{\"minionID\":\"ID of the minion\"}},\"constructor\":{\"details\":\"Set name, symbol, and addresses of interactive contracts\",\"params\":{\"ensRegistryAddr\":\"Address of ENS Registry\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getMinionIDs(address)\":{\"params\":{\"commander\":\"Commander of these minions\"},\"returns\":{\"minionIDs\":\"IDs of these minions\"}},\"getMinionInfo(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"},\"returns\":{\"_0\":\"On-chain information of the minion\"}},\"getMinionProfile(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"},\"returns\":{\"profile\":\"Minion info and tokeURI\"}},\"getTeamInfo(uint256[])\":{\"params\":{\"minionIDs\":\"IDs of the minions\"},\"returns\":{\"teamInfo\":\"Array of minion info\"}},\"grant(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"heal(uint256)\":{\"details\":\"Commander cost Hemoglobin\",\"params\":{\"minionID\":\"ID of the minion\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"liberate(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"minionExists(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"},\"returns\":{\"_0\":\"Exists or not\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"recruit(bytes32)\":{\"params\":{\"branchHash\":\"ENS-namehash of given pair (ex: eth-usd.data.eth)\"},\"returns\":{\"_0\":\"ID of the newly recruited minion\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"train(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"Fauna Army, which grows in bearish market\",\"version\":1},\"userdoc\":{\"events\":{\"MinionState(uint256,address,bool,int256,int256)\":{\"notice\":\"Emit when minion's state changes \"}},\"kind\":\"user\",\"methods\":{\"arm(uint256)\":{\"notice\":\"Arm a minion and update its power\"},\"boost(uint256)\":{\"notice\":\"Use Hemoglobin to stimulate an armed minion to catch up with training\"},\"enhancerContract()\":{\"notice\":\"Corresponding Enhancer contract\"},\"ens()\":{\"notice\":\"ENS interface (fixed address)\"},\"getMinionIDs(address)\":{\"notice\":\"Get minion IDs, like (2,6,9), given commander\"},\"getMinionInfo(uint256)\":{\"notice\":\"Get minion's on-chain information\"},\"getMinionProfile(uint256)\":{\"notice\":\"Get minion's profile\"},\"getTeamInfo(uint256[])\":{\"notice\":\"Get all minions' info given minion IDs\"},\"grant(uint256)\":{\"notice\":\"Grant minion with current token URI\"},\"heal(uint256)\":{\"notice\":\"Use Hemoglobin to heal a minion who suffer from negative training\"},\"initPower()\":{\"notice\":\"Inital minion's power\"},\"liberate(uint256)\":{\"notice\":\"Liberate a minion and get some enhancer\"},\"minionExists(uint256)\":{\"notice\":\"Get if minion exists\"},\"population()\":{\"notice\":\"Population of minions\"},\"rankContract()\":{\"notice\":\"Corresponding Rank contract\"},\"recruit(bytes32)\":{\"notice\":\"Recruit a minion\"},\"serialNumber()\":{\"notice\":\"Serial number of minions, imply how many minions have been created\"},\"tokenURI(uint256)\":{\"notice\":\"Get minion's metadata URI\"},\"train(uint256)\":{\"notice\":\"Train a minion and update the environment factor\"}},\"notice\":\"ERC721 token cultivated by predicting market price (using Chainlink oracle)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FaunaArmy.sol\":\"FaunaArmy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ArmyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"./ArmyInterface.sol\\\";\\r\\nimport \\\"./ArmyEnhancer.sol\\\";\\r\\nimport \\\"./ArmyRank.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice ENS registry to get chainlink resolver\\r\\n */\\r\\ninterface ENS {\\r\\n    function resolver(bytes32) external view returns (Resolver);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice Chainlink resolver to get price feed proxy\\r\\n */\\r\\ninterface Resolver {\\r\\n    function addr(bytes32) external view returns (address);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Army contract with basic command\\r\\n * @author Justa Liang\\r\\n */\\r\\nabstract contract ArmyBase is ERC721URIStorage, ArmyInterface {\\r\\n\\r\\n    /// @notice Corresponding Enhancer contract\\r\\n    ENHR public enhancerContract;\\r\\n\\r\\n    /// @notice Corresponding Rank contract\\r\\n    RANK public rankContract;\\r\\n\\r\\n    /// @notice Serial number of minions, imply how many minions have been created\\r\\n    uint public serialNumber;\\r\\n\\r\\n    /// @notice Population of minions\\r\\n    uint public population;\\r\\n\\r\\n    /// @notice Inital minion's power\\r\\n    int public initPower;\\r\\n\\r\\n    /// @notice ENS interface (fixed address)\\r\\n    ENS public ens;\\r\\n\\r\\n    /// @dev Minion data structure\\r\\n    struct Minion {\\r\\n        address     branchAddr;   // branch address (which proxy of Chainlink price feed)\\r\\n        bool        armed;        // armed or not\\r\\n        int         envFactor;    // environment factor (latest updated price from Chainlink)\\r\\n        int         power;        // power of the minion\\r\\n    }\\r\\n\\r\\n    /// @dev Minion profile to view\\r\\n    struct MinionProfile {\\r\\n        address     branch;\\r\\n        bool        armed;\\r\\n        int         price;\\r\\n        int         power;\\r\\n        string      uri;\\r\\n    }\\r\\n\\r\\n    /// @dev Minion data storage\\r\\n    Minion[] public minions;\\r\\n\\r\\n    /// @notice Emit when minion's state changes \\r\\n    event MinionState(\\r\\n        uint indexed minionID,\\r\\n        address indexed branchAddress,\\r\\n        bool indexed armed,\\r\\n        int environmentFactor,\\r\\n        int power\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Set name, symbol, and addresses of interactive contracts\\r\\n     * @param ensRegistryAddr Address of ENS Registry\\r\\n    */\\r\\n    constructor(address ensRegistryAddr) {\\r\\n        serialNumber = 0;\\r\\n        population = 0;\\r\\n        initPower = 1000;\\r\\n        ens = ENS(ensRegistryAddr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get if minion exists\\r\\n     * @param minionID ID of the minion\\r\\n     * @return Exists or not\\r\\n    */\\r\\n    function minionExists(uint minionID) override\\r\\n            external view returns (bool) {\\r\\n        return _exists(minionID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get minion's on-chain information\\r\\n     * @param minionID ID of the minion\\r\\n     * @return On-chain information of the minion\\r\\n    */\\r\\n    function getMinionInfo(uint minionID) override\\r\\n            external view returns (address, bool, int, int) {\\r\\n        require(\\r\\n            _exists(minionID),\\r\\n            \\\"ARMY: commander query for nonexistent minion\\\");\\r\\n        Minion storage m = minions[minionID];\\r\\n        return (m.branchAddr, m.armed, m.envFactor, m.power);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get minion's profile\\r\\n     * @param minionID ID of the minion\\r\\n     * @return profile Minion info and tokeURI\\r\\n    */    \\r\\n    function getMinionProfile(uint minionID) external view\\r\\n            returns (MinionProfile memory profile) {\\r\\n            require(\\r\\n                _exists(minionID),\\r\\n                \\\"ARMY: commander query for nonexistent minion\\\");            \\r\\n            Minion storage m = minions[minionID];\\r\\n            profile.branch = m.branchAddr;\\r\\n            profile.armed = m.armed;\\r\\n            profile.price = m.envFactor;\\r\\n            profile.power = m.power;\\r\\n            profile.uri = this.tokenURI(minionID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get minion IDs, like (2,6,9), given commander\\r\\n     * @param commander Commander of these minions\\r\\n     * @return minionIDs IDs of these minions\\r\\n    */\\r\\n    function getMinionIDs(address commander)\\r\\n            external view returns(uint[] memory minionIDs) {\\r\\n        uint minionCount = balanceOf(commander);\\r\\n        minionIDs = new uint[](minionCount);\\r\\n        uint listIdx = 0;\\r\\n        for (uint minionID = 0; listIdx < minionCount; minionID++) {\\r\\n            if (_exists(minionID) && ownerOf(minionID) == commander) {\\r\\n                minionIDs[listIdx] = minionID;\\r\\n                listIdx++;\\r\\n            }\\r\\n        }\\r\\n        return minionIDs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get all minions' info given minion IDs\\r\\n     * @param minionIDs IDs of the minions\\r\\n     * @return teamInfo Array of minion info\\r\\n    */\\r\\n    function getTeamInfo(uint[] calldata minionIDs)\\r\\n            external view returns (Minion[] memory teamInfo) {\\r\\n        teamInfo = new Minion[](minionIDs.length);\\r\\n        for (uint i = 0; i < minionIDs.length; i++) {\\r\\n            teamInfo[i] = minions[minionIDs[i]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recruit a minion\\r\\n     * @param branchHash ENS-namehash of given pair (ex: eth-usd.data.eth)\\r\\n     * @return ID of the newly recruited minion\\r\\n    */\\r\\n    function recruit(bytes32 branchHash) external override returns (uint) {\\r\\n        address branchAddr = _resolve(branchHash);\\r\\n        require(\\r\\n            branchAddr != address(0),\\r\\n            \\\"ARMY: invalid branch\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // mint minion and store its data on chain\\r\\n        uint newID = serialNumber;\\r\\n        _mint(msg.sender, newID);\\r\\n        minions.push(Minion(branchAddr, false, currPrice, initPower));\\r\\n\\r\\n        emit MinionState(newID, branchAddr, false, currPrice, initPower);\\r\\n        serialNumber++;\\r\\n        population++;\\r\\n        return newID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Liberate a minion and get some enhancer\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function liberate(uint minionID) external override checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        require(\\r\\n            target.armed,\\r\\n            \\\"ARMY: can only liberate armed minion\\\");\\r\\n\\r\\n        if (target.power > initPower) {\\r\\n             enhancerContract.produce(msg.sender, uint(target.power - initPower));\\r\\n        }\\r\\n        _burn(minionID);\\r\\n        population--;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get minion's metadata URI\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function tokenURI(uint minionID) public view override returns (string memory) {\\r\\n        require(\\r\\n            _exists(minionID),\\r\\n            \\\"ARMY: commander query for nonexistent minion\\\");\\r\\n        Minion storage target = minions[minionID];\\r\\n        string memory grantedURI = super.tokenURI(minionID);\\r\\n        if (bytes(grantedURI).length > 0) {\\r\\n            return grantedURI;\\r\\n        }\\r\\n        else {\\r\\n            return rankContract.query(target.branchAddr, target.power);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Grant minion with current token URI\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function grant(uint minionID) external override checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        _setTokenURI(minionID, rankContract.query(target.branchAddr, target.power));\\r\\n    }\\r\\n    \\r\\n  /**\\r\\n     * @dev Check if commander can command the minion\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    modifier checkCommander(uint minionID) {\\r\\n        require(\\r\\n            _isApprovedOrOwner(msg.sender, minionID),\\r\\n            \\\"ARMY: commander can't command the minion\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Resolve ENS-namehash to Chainlink price feed proxy\\r\\n     * @param node ENS-namehash of given pair\\r\\n     * @return Chainlink price feed proxy\\r\\n    */\\r\\n    function _resolve(bytes32 node) internal view returns (address) {\\r\\n        Resolver resolver = ens.resolver(node);\\r\\n        return resolver.addr(node);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3f2e6a1b1945bd51cc6a6fd9cb5a1aa409d5fdfa29fa8449fbf3d6bf637dda98\",\"license\":\"MIT\"},\"contracts/ArmyEnhancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Unique operations only for Army contract\\r\\n */\\r\\ninterface ENHR {\\r\\n    function produce(address, uint) external;\\r\\n    function consume(address, uint) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Organic Enhancer\\r\\n * @notice ERC20 token minted or burnt by Army contract\\r\\n * @author Justa Liang\\r\\n */\\r\\ncontract ArmyEnhancer is ERC20, Ownable {\\r\\n\\r\\n    /**\\r\\n     * @dev ERC20 constructor\\r\\n     * @param name Token name\\r\\n     * @param symbol Token symbol\\r\\n    */\\r\\n    constructor(string memory name, string memory symbol) \\r\\n        ERC20(name, symbol) {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Produce enhancer for commander\\r\\n     * @param commander Player of Army\\r\\n     * @param amount Amount of enhancer (no decimal concerned)\\r\\n    */\\r\\n    function produce(address commander, uint amount) external onlyOwner {\\r\\n        _mint(commander, amount*10**decimals());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Consume enhancer from commander\\r\\n     * @param commander Player of Army\\r\\n     * @param amount Amount of enhancer (no decimal concerned)\\r\\n    */\\r\\n    function consume(address commander, uint amount) external onlyOwner {\\r\\n        _burn(commander, amount*10**decimals());\\r\\n    }\\r\\n}\",\"keccak256\":\"0x196859750546c6de7749bdf8933b0ba27dbf0a8c61a1d9856453e19c362ac963\",\"license\":\"MIT\"},\"contracts/ArmyInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Army interface\\r\\n * @author Justa Liang\\r\\n */\\r\\ninterface ArmyInterface is IERC721 {\\r\\n\\r\\n    // basic view\\r\\n    function minionExists(uint) external view returns (bool);\\r\\n    function getMinionInfo(uint) external view returns (address, bool, int, int);\\r\\n\\r\\n    // basic command\\r\\n    function recruit(bytes32) external returns (uint);\\r\\n    function liberate(uint) external;\\r\\n    function grant(uint) external;\\r\\n\\r\\n    // command with different implementations between flora and fauna\\r\\n    function train(uint) external;\\r\\n    function arm(uint) external;\\r\\n    function boost(uint) external;\\r\\n    function heal(uint) external;\\r\\n}\",\"keccak256\":\"0x8155cccdb4740901bc33ea99081e35a07a5b55e968a275899f67ca7347cc724c\",\"license\":\"MIT\"},\"contracts/ArmyRank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Methods called by FloraArmy and FaunaArmy\\r\\n */\\r\\ninterface RANK {\\r\\n    function transferOwnership(address) external;\\r\\n    function query(address, int) external view returns (string memory);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Ranking system of FloraArmy and FaunaArmy\\r\\n * @author Justa Liang\\r\\n */\\r\\ncontract ArmyRank is Ownable {\\r\\n\\r\\n    /// @notice URI prefix of certain branch\\r\\n    mapping (address => string) public branchPrefix;\\r\\n\\r\\n    /// @notice Level of power to reach to upgrade minions\\r\\n    int[5] public powerLevels;\\r\\n\\r\\n    /// @notice Metadata filenames\\r\\n    string[5] public jsonNames;\\r\\n\\r\\n    /**\\r\\n     * @dev Set power levels and metadata filenames\\r\\n     * @param powerLevels_ Array with length 5, from low level to high\\r\\n     * @param jsonNames_ Array with length 5, from low level URI to high\\r\\n    */\\r\\n    constructor(int[5] memory powerLevels_, string[5] memory jsonNames_) {\\r\\n        for (uint i = 0; i < 5; i++) {\\r\\n            powerLevels[i] = powerLevels_[i];\\r\\n            jsonNames[i] = jsonNames_[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Call by Army Contract, to dynamically get token URI\\r\\n     * @param branchAddr Branch address of the minion\\r\\n     * @param power Power of the minion\\r\\n    */\\r\\n    function query(address branchAddr, int power) external view returns (string memory uriPrefix) {\\r\\n        for (uint i = 0; i < powerLevels.length; i++) {\\r\\n            if (power >= powerLevels[i]) {\\r\\n                string memory prefix = branchPrefix[branchAddr];\\r\\n                if (bytes(prefix).length == 0) {\\r\\n                    uriPrefix = string(abi.encodePacked(branchPrefix[address(0)], jsonNames[i]));\\r\\n                }\\r\\n                else {\\r\\n                    uriPrefix = string(abi.encodePacked(branchPrefix[branchAddr], jsonNames[i]));\\r\\n                }\\r\\n                return uriPrefix;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update branch prefix (give ownership to Battlefield contract in the future)\\r\\n     * @param branchAddr Branch address\\r\\n     * @param prefix Prefix of URI to be set\\r\\n    */\\r\\n    function updateBranchPrefix(address branchAddr, string calldata prefix) external onlyOwner {\\r\\n        branchPrefix[branchAddr] = prefix;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change power levels (will be discarded)\\r\\n     * @param powerLevels_ Array with length 5, from low level to high\\r\\n    */\\r\\n    function changePowerLevels(int[5] calldata powerLevels_) external onlyOwner {\\r\\n        for (uint i = 0; i < 5; i++) {\\r\\n            powerLevels[i] = powerLevels_[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change metadat filename (will be discarded)\\r\\n     * @param jsonNames_ Array with length 5, from low level URI to high\\r\\n    */\\r\\n    function changeJsonNames(string[5] calldata jsonNames_) external onlyOwner {\\r\\n        for (uint i = 0; i < 5; i++) {\\r\\n            jsonNames[i] = jsonNames_[i];\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x02aeb95bb7da1d525daa655edad6d6dde7861236f794e35dd43d03f80fd42c4d\",\"license\":\"MIT\"},\"contracts/FaunaArmy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ArmyBase.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Fauna Army, which grows in bearish market\\r\\n * @notice ERC721 token cultivated by predicting market price (using Chainlink oracle)\\r\\n * @author Justa Liang\\r\\n */\\r\\ncontract FaunaArmy is ArmyBase {\\r\\n\\r\\n    /**\\r\\n     * @dev Set name, symbol, and addresses of interactive contracts\\r\\n     * @param ensRegistryAddr Address of ENS Registry\\r\\n    */\\r\\n    constructor(address ensRegistryAddr, uint initEnhancer,\\r\\n                int[5] memory powerLevels, string[5] memory jsonNames) \\r\\n        ArmyBase(ensRegistryAddr)\\r\\n        ERC721(\\\"FaunaArmy\\\", \\\"FaunA\\\")\\r\\n    {\\r\\n        enhancerContract = ENHR(address(new ArmyEnhancer(\\\"Hemoglobin\\\", \\\"HGB\\\")));\\r\\n        enhancerContract.produce(msg.sender, initEnhancer);\\r\\n        rankContract = RANK(address(new ArmyRank(powerLevels, jsonNames)));\\r\\n        rankContract.transferOwnership(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Train a minion and update the environment factor\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function train(uint minionID) external override checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        require(\\r\\n            target.armed,\\r\\n            \\\"ARMY: minion is already in training state\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // update on-chain data\\r\\n        target.envFactor = currPrice;\\r\\n        target.armed = false;\\r\\n\\r\\n        // emit minion state\\r\\n        emit MinionState(minionID, target.branchAddr, false, currPrice, target.power);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Arm a minion and update its power\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function arm(uint minionID) external override checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        require(\\r\\n            !target.armed,\\r\\n            \\\"ARMY: minion is already armed\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // update on-chain data\\r\\n        target.power = ((target.envFactor << 16)/currPrice*target.power) >> 16;\\r\\n        target.envFactor = currPrice;\\r\\n        target.armed = true;\\r\\n\\r\\n        // emit minion state\\r\\n        emit MinionState(minionID, target.branchAddr, true, currPrice, target.power);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Use Hemoglobin to stimulate an armed minion to catch up with training\\r\\n     * @dev Commander cost Hemoglobin\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function boost(uint minionID) external override checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        require(\\r\\n            target.armed,\\r\\n            \\\"ARMY: minion is already in training state\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // change state\\r\\n        if (currPrice < target.envFactor) {\\r\\n             enhancerContract.consume(msg.sender, uint(((target.envFactor << 16)/currPrice*target.power) >> 16));\\r\\n        }\\r\\n        target.armed = false;\\r\\n\\r\\n        // emit minion state\\r\\n        emit MinionState(minionID, target.branchAddr, false, target.envFactor, target.power);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Use Hemoglobin to heal a minion who suffer from negative training\\r\\n     * @dev Commander cost Hemoglobin\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function heal(uint minionID) external override checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        require(\\r\\n            !target.armed,\\r\\n            \\\"ARMY: minion is not in training state\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // change state\\r\\n        if (currPrice > target.envFactor) {\\r\\n            enhancerContract.consume(msg.sender, uint(((currPrice << 16)/target.envFactor*target.power) >> 16));\\r\\n        }\\r\\n        target.armed = true;\\r\\n\\r\\n        // emit minion state\\r\\n        emit MinionState(minionID, target.branchAddr, true, target.envFactor, target.power);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9637bd1a0816e03312d75f72fc3b07bd1028c35a3d1a7694eb19a6001a71849c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Justa Liang",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "arm(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "boost(uint256)": {
        "details": "Commander cost Hemoglobin",
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "constructor": {
        "details": "Set name, symbol, and addresses of interactive contracts",
        "params": {
          "ensRegistryAddr": "Address of ENS Registry"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getMinionIDs(address)": {
        "params": {
          "commander": "Commander of these minions"
        },
        "returns": {
          "minionIDs": "IDs of these minions"
        }
      },
      "getMinionInfo(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        },
        "returns": {
          "_0": "On-chain information of the minion"
        }
      },
      "getMinionProfile(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        },
        "returns": {
          "profile": "Minion info and tokeURI"
        }
      },
      "getTeamInfo(uint256[])": {
        "params": {
          "minionIDs": "IDs of the minions"
        },
        "returns": {
          "teamInfo": "Array of minion info"
        }
      },
      "grant(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "heal(uint256)": {
        "details": "Commander cost Hemoglobin",
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "liberate(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "minionExists(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        },
        "returns": {
          "_0": "Exists or not"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "recruit(bytes32)": {
        "params": {
          "branchHash": "ENS-namehash of given pair (ex: eth-usd.data.eth)"
        },
        "returns": {
          "_0": "ID of the newly recruited minion"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "train(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "Fauna Army, which grows in bearish market",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MinionState(uint256,address,bool,int256,int256)": {
        "notice": "Emit when minion's state changes "
      }
    },
    "kind": "user",
    "methods": {
      "arm(uint256)": {
        "notice": "Arm a minion and update its power"
      },
      "boost(uint256)": {
        "notice": "Use Hemoglobin to stimulate an armed minion to catch up with training"
      },
      "enhancerContract()": {
        "notice": "Corresponding Enhancer contract"
      },
      "ens()": {
        "notice": "ENS interface (fixed address)"
      },
      "getMinionIDs(address)": {
        "notice": "Get minion IDs, like (2,6,9), given commander"
      },
      "getMinionInfo(uint256)": {
        "notice": "Get minion's on-chain information"
      },
      "getMinionProfile(uint256)": {
        "notice": "Get minion's profile"
      },
      "getTeamInfo(uint256[])": {
        "notice": "Get all minions' info given minion IDs"
      },
      "grant(uint256)": {
        "notice": "Grant minion with current token URI"
      },
      "heal(uint256)": {
        "notice": "Use Hemoglobin to heal a minion who suffer from negative training"
      },
      "initPower()": {
        "notice": "Inital minion's power"
      },
      "liberate(uint256)": {
        "notice": "Liberate a minion and get some enhancer"
      },
      "minionExists(uint256)": {
        "notice": "Get if minion exists"
      },
      "population()": {
        "notice": "Population of minions"
      },
      "rankContract()": {
        "notice": "Corresponding Rank contract"
      },
      "recruit(bytes32)": {
        "notice": "Recruit a minion"
      },
      "serialNumber()": {
        "notice": "Serial number of minions, imply how many minions have been created"
      },
      "tokenURI(uint256)": {
        "notice": "Get minion's metadata URI"
      },
      "train(uint256)": {
        "notice": "Train a minion and update the environment factor"
      }
    },
    "notice": "ERC721 token cultivated by predicting market price (using Chainlink oracle)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 881,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 883,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 891,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 895,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 901,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1818,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2553,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "enhancerContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ENHR)3121"
      },
      {
        "astId": 2557,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "rankContract",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(RANK)3265"
      },
      {
        "astId": 2560,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "serialNumber",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2563,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "population",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2566,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "initPower",
        "offset": 0,
        "slot": "11",
        "type": "t_int256"
      },
      {
        "astId": 2570,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "ens",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(ENS)2535"
      },
      {
        "astId": 2595,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "minions",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Minion)2579_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Minion)2579_storage)dyn_storage": {
        "base": "t_struct(Minion)2579_storage",
        "encoding": "dynamic_array",
        "label": "struct ArmyBase.Minion[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ENHR)3121": {
        "encoding": "inplace",
        "label": "contract ENHR",
        "numberOfBytes": "20"
      },
      "t_contract(ENS)2535": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(RANK)3265": {
        "encoding": "inplace",
        "label": "contract RANK",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Minion)2579_storage": {
        "encoding": "inplace",
        "label": "struct ArmyBase.Minion",
        "members": [
          {
            "astId": 2572,
            "contract": "contracts/FaunaArmy.sol:FaunaArmy",
            "label": "branchAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2574,
            "contract": "contracts/FaunaArmy.sol:FaunaArmy",
            "label": "armed",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2576,
            "contract": "contracts/FaunaArmy.sol:FaunaArmy",
            "label": "envFactor",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 2578,
            "contract": "contracts/FaunaArmy.sol:FaunaArmy",
            "label": "power",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}