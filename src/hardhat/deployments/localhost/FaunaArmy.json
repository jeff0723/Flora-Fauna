{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ensRegistryAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initEnhancer",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "int256[5]",
          "name": "powerLevels",
          "type": "int256[5]"
        },
        {
          "internalType": "string[5]",
          "name": "metadataNames",
          "type": "string[5]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "branchAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "armed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "environmentFactor",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "power",
          "type": "int256"
        }
      ],
      "name": "MinionState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "arm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "boost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[5]",
          "name": "metadataNames_",
          "type": "string[5]"
        }
      ],
      "name": "changeMetadataNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[5]",
          "name": "powerLevels_",
          "type": "int256[5]"
        }
      ],
      "name": "changePowerLevels",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enhancerContract",
      "outputs": [
        {
          "internalType": "contract ENHR",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "commander",
          "type": "address"
        }
      ],
      "name": "getMinionIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "minionIDs",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "getMinionInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "getMinionProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "branch",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "armed",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "power",
              "type": "int256"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            }
          ],
          "internalType": "struct ArmyBase.MinionProfile",
          "name": "profile",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "minionIDs",
          "type": "uint256[]"
        }
      ],
      "name": "getTeamProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "branch",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "armed",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "power",
              "type": "int256"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            }
          ],
          "internalType": "struct ArmyBase.MinionProfile[]",
          "name": "teamProfile",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "grant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "heal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initPower",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "liberate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadataNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "minionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "minions",
      "outputs": [
        {
          "internalType": "address",
          "name": "branchAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "armed",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "envFactor",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "power",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "powerLevels",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "branchHash",
          "type": "bytes32"
        }
      ],
      "name": "recruit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serialNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minionID",
          "type": "uint256"
        }
      ],
      "name": "train",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b0a62d5c18193ee7e517099ef88133a167f3489b123342ef12651b12999ccc1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "4359284",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000001000000000000000000000000000000000000020000000000000108000800000000000000000000000010000000400000000000000000000000008000000000000000000000000000000000000000002000000000000000000000008000000000000000000000000000000000000000000002000000200000000000000000040000002000000000000000000020000000000000000000000400000000040000001000000000000000000000000000",
    "blockHash": "0xb4cc7aaddbc4b53e812ef5323e94683fe4b4155a8e694eb38559a1b0d4d6a43e",
    "transactionHash": "0x6b0a62d5c18193ee7e517099ef88133a167f3489b123342ef12651b12999ccc1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10,
        "transactionHash": "0x6b0a62d5c18193ee7e517099ef88133a167f3489b123342ef12651b12999ccc1",
        "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb4cc7aaddbc4b53e812ef5323e94683fe4b4155a8e694eb38559a1b0d4d6a43e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10,
        "transactionHash": "0x6b0a62d5c18193ee7e517099ef88133a167f3489b123342ef12651b12999ccc1",
        "address": "0x8aCd85898458400f7Db866d53FCFF6f0D49741FF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008a791620dd6260079bf849dc5567adc3f2fdc318"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb4cc7aaddbc4b53e812ef5323e94683fe4b4155a8e694eb38559a1b0d4d6a43e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10,
        "transactionHash": "0x6b0a62d5c18193ee7e517099ef88133a167f3489b123342ef12651b12999ccc1",
        "address": "0x8aCd85898458400f7Db866d53FCFF6f0D49741FF",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x00000000000000000000000000000000000000622b5afc8cc3deac5953240000",
        "logIndex": 2,
        "blockHash": "0xb4cc7aaddbc4b53e812ef5323e94683fe4b4155a8e694eb38559a1b0d4d6a43e"
      }
    ],
    "blockNumber": 10,
    "cumulativeGasUsed": "4359284",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    7777777777777,
    "ipfs://bafybeigd7f3maglyvcyvxonmu4copfosxqocg5dpyetw7ozg22m44j27le/",
    [
      2000,
      1500,
      1300,
      1100,
      0
    ],
    [
      "fauna_5.json",
      "fauna_4.json",
      "fauna_3.json",
      "fauna_2.json",
      "fauna_1.json"
    ]
  ],
  "solcInputHash": "6a24e82fa8ad1c958465dc101e3a2c14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistryAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initEnhancer\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"int256[5]\",\"name\":\"powerLevels\",\"type\":\"int256[5]\"},{\"internalType\":\"string[5]\",\"name\":\"metadataNames\",\"type\":\"string[5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"branchAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"armed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"environmentFactor\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"}],\"name\":\"MinionState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"arm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[5]\",\"name\":\"metadataNames_\",\"type\":\"string[5]\"}],\"name\":\"changeMetadataNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[5]\",\"name\":\"powerLevels_\",\"type\":\"int256[5]\"}],\"name\":\"changePowerLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enhancerContract\",\"outputs\":[{\"internalType\":\"contract ENHR\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"commander\",\"type\":\"address\"}],\"name\":\"getMinionIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minionIDs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"getMinionInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"getMinionProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"branch\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"armed\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct ArmyBase.MinionProfile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minionIDs\",\"type\":\"uint256[]\"}],\"name\":\"getTeamProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"branch\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"armed\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct ArmyBase.MinionProfile[]\",\"name\":\"teamProfile\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"heal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPower\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"liberate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadataNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"minionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"branchAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"armed\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"envFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"power\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"powerLevels\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"branchHash\",\"type\":\"bytes32\"}],\"name\":\"recruit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serialNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minionID\",\"type\":\"uint256\"}],\"name\":\"train\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Justa Liang\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"arm(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"boost(uint256)\":{\"details\":\"Commander cost Hemoglobin\",\"params\":{\"minionID\":\"ID of the minion\"}},\"changeMetadataNames(string[5])\":{\"details\":\"Change metadat filename (will be discarded)\",\"params\":{\"metadataNames_\":\"Array with length 5, from low level URI to high\"}},\"changePowerLevels(int256[5])\":{\"details\":\"Change power levels (will be discarded)\",\"params\":{\"powerLevels_\":\"Array with length 5, from low level to high\"}},\"constructor\":{\"details\":\"Set name, symbol, and addresses of interactive contracts\",\"params\":{\"ensRegistryAddr\":\"Address of ENS Registry\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getMinionIDs(address)\":{\"params\":{\"commander\":\"Commander of these minions\"},\"returns\":{\"minionIDs\":\"IDs of these minions\"}},\"getMinionInfo(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"},\"returns\":{\"_0\":\"On-chain information of the minion\"}},\"getMinionProfile(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"},\"returns\":{\"profile\":\"Minion info and tokeURI\"}},\"getTeamProfile(uint256[])\":{\"params\":{\"minionIDs\":\"IDs of the minions\"},\"returns\":{\"teamProfile\":\"Array of minion info\"}},\"grant(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"heal(uint256)\":{\"details\":\"Commander cost Hemoglobin\",\"params\":{\"minionID\":\"ID of the minion\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"liberate(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"minionExists(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"},\"returns\":{\"_0\":\"Exists or not\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"recruit(bytes32)\":{\"params\":{\"branchHash\":\"ENS-namehash of given pair (ex: eth-usd.data.eth)\"},\"returns\":{\"_0\":\"ID of the newly recruited minion\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"train(uint256)\":{\"params\":{\"minionID\":\"ID of the minion\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBaseURI(string)\":{\"details\":\"Update branch prefix (give ownership to Battlefield contract in the future)\",\"params\":{\"baseURI_\":\"Prefix of URI to be set\"}}},\"title\":\"Fauna Army, which grows in bearish market\",\"version\":1},\"userdoc\":{\"events\":{\"MinionState(uint256,address,bool,int256,int256)\":{\"notice\":\"Emit when minion's state changes \"}},\"kind\":\"user\",\"methods\":{\"arm(uint256)\":{\"notice\":\"Arm a minion and update its power\"},\"baseURI()\":{\"notice\":\"Base URI (prefix)\"},\"boost(uint256)\":{\"notice\":\"Use Hemoglobin to stimulate an armed minion to catch up with training\"},\"enhancerContract()\":{\"notice\":\"Corresponding Enhancer contract\"},\"ens()\":{\"notice\":\"ENS interface (fixed address)\"},\"getMinionIDs(address)\":{\"notice\":\"Get minion IDs, like (2,6,9), given commander\"},\"getMinionInfo(uint256)\":{\"notice\":\"Get minion's on-chain information\"},\"getMinionProfile(uint256)\":{\"notice\":\"Get minion's profile\"},\"getTeamProfile(uint256[])\":{\"notice\":\"Get all minions' info given minion IDs\"},\"grant(uint256)\":{\"notice\":\"Grant minion with current token URI\"},\"heal(uint256)\":{\"notice\":\"Use Hemoglobin to heal a minion who suffer from negative training\"},\"initPower()\":{\"notice\":\"Inital minion's power\"},\"liberate(uint256)\":{\"notice\":\"Liberate a minion and get some enhancer\"},\"metadataNames(uint256)\":{\"notice\":\"Metadata filenames\"},\"minionExists(uint256)\":{\"notice\":\"Get if minion exists\"},\"powerLevels(uint256)\":{\"notice\":\"Level of power to reach to upgrade minions\"},\"recruit(bytes32)\":{\"notice\":\"Recruit a minion\"},\"serialNumber()\":{\"notice\":\"Serial number of minions, imply how many minions have been created\"},\"tokenURI(uint256)\":{\"notice\":\"Get minion's metadata URI\"},\"train(uint256)\":{\"notice\":\"Train a minion and update the environment factor\"}},\"notice\":\"ERC721 token cultivated by predicting market price (using Chainlink oracle)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FaunaArmy.sol\":\"FaunaArmy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ArmyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"./ArmyEnhancer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice ENS registry to get chainlink resolver\\r\\n */\\r\\ninterface ENS {\\r\\n    function resolver(bytes32) external view returns (Resolver);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice Chainlink resolver to get price feed proxy\\r\\n */\\r\\ninterface Resolver {\\r\\n    function addr(bytes32) external view returns (address);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Army contract with basic command\\r\\n * @author Justa Liang\\r\\n */\\r\\nabstract contract ArmyBase is ERC721Enumerable {\\r\\n\\r\\n    /// @notice Corresponding Enhancer contract\\r\\n    ENHR public enhancerContract;\\r\\n\\r\\n    /// @notice Serial number of minions, imply how many minions have been created\\r\\n    uint public serialNumber;\\r\\n\\r\\n    /// @notice Inital minion's power\\r\\n    int public initPower;\\r\\n\\r\\n    /// @notice ENS interface (fixed address)\\r\\n    ENS public ens;\\r\\n\\r\\n    /// @dev Minion data structure\\r\\n    struct Minion {\\r\\n        address     branchAddr;   // branch address (which proxy of Chainlink price feed)\\r\\n        bool        armed;        // armed or not\\r\\n        int         envFactor;    // environment factor (latest updated price from Chainlink)\\r\\n        int         power;        // power of the minion\\r\\n    }\\r\\n\\r\\n    /// @dev Minion profile to view\\r\\n    struct MinionProfile {\\r\\n        address     branch;\\r\\n        bool        armed;\\r\\n        int         price;\\r\\n        int         power;\\r\\n        string      uri;\\r\\n    }\\r\\n\\r\\n    /// @dev Minion data storage\\r\\n    mapping(uint => Minion) public minions;\\r\\n\\r\\n    /// @notice Emit when minion's state changes \\r\\n    event MinionState(\\r\\n        uint indexed minionID,\\r\\n        address indexed branchAddress,\\r\\n        bool indexed armed,\\r\\n        int environmentFactor,\\r\\n        int power\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Set name, symbol, and addresses of interactive contracts\\r\\n     * @param ensRegistryAddr Address of ENS Registry\\r\\n    */\\r\\n    constructor(address ensRegistryAddr) {\\r\\n        serialNumber = 0;\\r\\n        initPower = 1000;\\r\\n        ens = ENS(ensRegistryAddr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get if minion exists\\r\\n     * @param minionID ID of the minion\\r\\n     * @return Exists or not\\r\\n    */\\r\\n    function minionExists(uint minionID) external view returns (bool) {\\r\\n        return _exists(minionID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get minion's on-chain information\\r\\n     * @param minionID ID of the minion\\r\\n     * @return On-chain information of the minion\\r\\n    */\\r\\n    function getMinionInfo(uint minionID) public view returns (address, bool, int, int) {\\r\\n        require(\\r\\n            _exists(minionID),\\r\\n            \\\"ARMY: commander query for nonexistent minion\\\");\\r\\n        Minion storage m = minions[minionID];\\r\\n        return (m.branchAddr, m.armed, m.envFactor, m.power);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get minion IDs, like (2,6,9), given commander\\r\\n     * @param commander Commander of these minions\\r\\n     * @return minionIDs IDs of these minions\\r\\n    */\\r\\n    function getMinionIDs(address commander) public view returns(uint[] memory minionIDs) {\\r\\n        uint minionCount = balanceOf(commander);\\r\\n        minionIDs = new uint[](minionCount);\\r\\n        for (uint i = 0; i < minionCount; i++) {\\r\\n            minionIDs[i] = tokenOfOwnerByIndex(commander, i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recruit a minion\\r\\n     * @param branchHash ENS-namehash of given pair (ex: eth-usd.data.eth)\\r\\n     * @return ID of the newly recruited minion\\r\\n    */\\r\\n    function recruit(bytes32 branchHash) external returns (uint) {\\r\\n        address branchAddr = _resolve(branchHash);\\r\\n        require(\\r\\n            branchAddr != address(0),\\r\\n            \\\"ARMY: invalid branch\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // mint minion and store its data on chain\\r\\n        uint newID = serialNumber;\\r\\n        _safeMint(msg.sender, newID);\\r\\n        minions[newID] = Minion(branchAddr, false, currPrice, initPower);\\r\\n\\r\\n        emit MinionState(newID, branchAddr, false, currPrice, initPower);\\r\\n        serialNumber++;\\r\\n        return newID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if commander can command the minion\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    modifier checkCommander(uint minionID) {\\r\\n        require(\\r\\n            _isApprovedOrOwner(msg.sender, minionID),\\r\\n            \\\"ARMY: commander can't command the minion\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Resolve ENS-namehash to Chainlink price feed proxy\\r\\n     * @param node ENS-namehash of given pair\\r\\n     * @return Chainlink price feed proxy\\r\\n    */\\r\\n    function _resolve(bytes32 node) internal view returns (address) {\\r\\n        Resolver resolver = ens.resolver(node);\\r\\n        return resolver.addr(node);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x5c2d8e506a64b6a37fcbbbb7b6c0c3fb90ecb132ef090efd73f179b99344b07b\",\"license\":\"MIT\"},\"contracts/ArmyEnhancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Unique operations only for Army contract\\r\\n */\\r\\ninterface ENHR {\\r\\n    function produce(address, uint) external;\\r\\n    function consume(address, uint) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Organic Enhancer\\r\\n * @notice ERC20 token minted or burnt by Army contract\\r\\n * @author Justa Liang\\r\\n */\\r\\ncontract ArmyEnhancer is ERC20, Ownable {\\r\\n\\r\\n    /**\\r\\n     * @dev ERC20 constructor\\r\\n     * @param name Token name\\r\\n     * @param symbol Token symbol\\r\\n    */\\r\\n    constructor(string memory name, string memory symbol) \\r\\n        ERC20(name, symbol) {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Produce enhancer for commander\\r\\n     * @param commander Player of Army\\r\\n     * @param amount Amount of enhancer (no decimal concerned)\\r\\n    */\\r\\n    function produce(address commander, uint amount) external onlyOwner {\\r\\n        _mint(commander, amount*10**decimals());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Consume enhancer from commander\\r\\n     * @param commander Player of Army\\r\\n     * @param amount Amount of enhancer (no decimal concerned)\\r\\n    */\\r\\n    function consume(address commander, uint amount) external onlyOwner {\\r\\n        _burn(commander, amount*10**decimals());\\r\\n    }\\r\\n}\",\"keccak256\":\"0x196859750546c6de7749bdf8933b0ba27dbf0a8c61a1d9856453e19c362ac963\",\"license\":\"MIT\"},\"contracts/ArmyRank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./ArmyBase.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ranking system of FloraArmy and FaunaArmy\\r\\n * @author Justa Liang\\r\\n */\\r\\nabstract contract ArmyRank is ArmyBase, Ownable {\\r\\n\\r\\n    /// @notice Base URI (prefix)\\r\\n    string public baseURI;\\r\\n\\r\\n    /// @notice Level of power to reach to upgrade minions\\r\\n    int[5] public powerLevels;\\r\\n\\r\\n    /// @notice Metadata filenames\\r\\n    string[5] public metadataNames;\\r\\n\\r\\n    // Mapping for token URIs\\r\\n    mapping(uint => string) private _tokenURIs;\\r\\n\\r\\n    /**\\r\\n     * @dev Set power levels and metadata filenames\\r\\n     * @param powerLevels_ Array with length 5, from high level to low\\r\\n     * @param metadataNames_ Array with length 5, from high level URI to low\\r\\n    */\\r\\n    constructor(string memory baseURI_,\\r\\n                int[5] memory powerLevels_,\\r\\n                string[5] memory metadataNames_) {\\r\\n        for (uint i = 0; i < 5; i++) {\\r\\n            powerLevels[i] = powerLevels_[i];\\r\\n            metadataNames[i] = metadataNames_[i];\\r\\n        }\\r\\n        baseURI = baseURI_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get minion's metadata URI\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function tokenURI(uint minionID) public view override returns (string memory) {\\r\\n        require(\\r\\n            _exists(minionID),\\r\\n            \\\"ARMY: commander query for nonexistent minion\\\");\\r\\n    \\r\\n        string memory grantedURI = _tokenURIs[minionID];\\r\\n        if (bytes(grantedURI).length > 0) {\\r\\n            return grantedURI;\\r\\n        }\\r\\n        else {\\r\\n            (,,,int power) = getMinionInfo(minionID);\\r\\n            for (uint i = 0; i < powerLevels.length; i++) {\\r\\n                if (power >= powerLevels[i]) {\\r\\n                    return string(abi.encodePacked(baseURI, metadataNames[i]));\\r\\n                }\\r\\n            }\\r\\n            return string(abi.encodePacked(baseURI, metadataNames[4]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Grant minion with current token URI\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function grant(uint minionID) external checkCommander(minionID) {\\r\\n        string memory currentURI;\\r\\n        (,,,int power) = getMinionInfo(minionID);\\r\\n        for (uint i = 0; i < powerLevels.length; i++) {\\r\\n            if (power >= powerLevels[i]) {\\r\\n                currentURI = string(abi.encodePacked(baseURI, metadataNames[i]));\\r\\n            }\\r\\n        }\\r\\n        _tokenURIs[minionID] = currentURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get minion's profile\\r\\n     * @param minionID ID of the minion\\r\\n     * @return profile Minion info and tokeURI\\r\\n    */    \\r\\n    function getMinionProfile(uint minionID) public view\\r\\n            returns (MinionProfile memory profile) {\\r\\n            require(\\r\\n                _exists(minionID),\\r\\n                \\\"ARMY: commander query for nonexistent minion\\\");            \\r\\n            Minion storage m = minions[minionID];\\r\\n            profile.branch = m.branchAddr;\\r\\n            profile.armed = m.armed;\\r\\n            profile.price = m.envFactor;\\r\\n            profile.power = m.power;\\r\\n            profile.uri = tokenURI(minionID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get all minions' info given minion IDs\\r\\n     * @param minionIDs IDs of the minions\\r\\n     * @return teamProfile Array of minion info\\r\\n    */\\r\\n    function getTeamProfile(uint[] calldata minionIDs)\\r\\n            external view returns (MinionProfile[] memory teamProfile) {\\r\\n        teamProfile = new MinionProfile[](minionIDs.length);\\r\\n        for (uint i = 0; i < minionIDs.length; i++) {\\r\\n            teamProfile[i] = getMinionProfile(minionIDs[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Liberate a minion and get some enhancer\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function liberate(uint minionID) external checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        if (target.power > initPower) {\\r\\n             enhancerContract.produce(msg.sender, uint(target.power - initPower));\\r\\n        }\\r\\n        _burn(minionID);\\r\\n        delete minions[minionID];\\r\\n        if (bytes(_tokenURIs[minionID]).length != 0) {\\r\\n            delete _tokenURIs[minionID];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update branch prefix (give ownership to Battlefield contract in the future)\\r\\n     * @param baseURI_ Prefix of URI to be set\\r\\n    */\\r\\n    function updateBaseURI(string calldata baseURI_) external onlyOwner {\\r\\n        baseURI = baseURI_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change power levels (will be discarded)\\r\\n     * @param powerLevels_ Array with length 5, from low level to high\\r\\n    */\\r\\n    function changePowerLevels(int[5] calldata powerLevels_) external onlyOwner {\\r\\n        for (uint i = 0; i < 5; i++) {\\r\\n            powerLevels[i] = powerLevels_[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change metadat filename (will be discarded)\\r\\n     * @param metadataNames_ Array with length 5, from low level URI to high\\r\\n    */\\r\\n    function changeMetadataNames(string[5] calldata metadataNames_) external onlyOwner {\\r\\n        for (uint i = 0; i < 5; i++) {\\r\\n            metadataNames[i] = metadataNames_[i];\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb82844a5cf3bc276d219acdbad06f3b00d0e860c258a97c2503ae5e61a399af6\",\"license\":\"MIT\"},\"contracts/FaunaArmy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ArmyRank.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Fauna Army, which grows in bearish market\\r\\n * @notice ERC721 token cultivated by predicting market price (using Chainlink oracle)\\r\\n * @author Justa Liang\\r\\n */\\r\\ncontract FaunaArmy is ArmyRank {\\r\\n\\r\\n    /**\\r\\n     * @dev Set name, symbol, and addresses of interactive contracts\\r\\n     * @param ensRegistryAddr Address of ENS Registry\\r\\n    */\\r\\n    constructor(address ensRegistryAddr, uint initEnhancer,\\r\\n                string memory baseURI, int[5] memory powerLevels, string[5] memory metadataNames) \\r\\n        ERC721(\\\"FaunaArmy\\\", \\\"FaunA\\\")\\r\\n        ArmyBase(ensRegistryAddr)\\r\\n        ArmyRank(baseURI, powerLevels, metadataNames)\\r\\n    {\\r\\n        enhancerContract = ENHR(address(new ArmyEnhancer(\\\"Hemoglobin\\\", \\\"HGB\\\")));\\r\\n        enhancerContract.produce(msg.sender, initEnhancer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Train a minion and update the environment factor\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function train(uint minionID) external checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        require(\\r\\n            target.armed,\\r\\n            \\\"ARMY: minion is already in training state\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // update on-chain data\\r\\n        target.envFactor = currPrice;\\r\\n        target.armed = false;\\r\\n\\r\\n        // emit minion state\\r\\n        emit MinionState(minionID, target.branchAddr, false, currPrice, target.power);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Arm a minion and update its power\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function arm(uint minionID) external checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        require(\\r\\n            !target.armed,\\r\\n            \\\"ARMY: minion is already armed\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // update on-chain data\\r\\n        target.power = ((target.envFactor << 16)/currPrice*target.power) >> 16;\\r\\n        target.envFactor = currPrice;\\r\\n        target.armed = true;\\r\\n\\r\\n        // emit minion state\\r\\n        emit MinionState(minionID, target.branchAddr, true, currPrice, target.power);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Use Hemoglobin to stimulate an armed minion to catch up with training\\r\\n     * @dev Commander cost Hemoglobin\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function boost(uint minionID) external checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        require(\\r\\n            target.armed,\\r\\n            \\\"ARMY: minion is already in training state\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // change state\\r\\n        if (currPrice < target.envFactor) {\\r\\n             enhancerContract.consume(msg.sender, uint(((target.envFactor << 16)/currPrice*target.power) >> 16));\\r\\n        }\\r\\n        target.armed = false;\\r\\n\\r\\n        // emit minion state\\r\\n        emit MinionState(minionID, target.branchAddr, false, target.envFactor, target.power);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Use Hemoglobin to heal a minion who suffer from negative training\\r\\n     * @dev Commander cost Hemoglobin\\r\\n     * @param minionID ID of the minion\\r\\n    */\\r\\n    function heal(uint minionID) external checkCommander(minionID) {\\r\\n        Minion storage target = minions[minionID];\\r\\n        require(\\r\\n            !target.armed,\\r\\n            \\\"ARMY: minion is not in training state\\\");\\r\\n\\r\\n        // get current price\\r\\n        AggregatorV3Interface pricefeed = AggregatorV3Interface(target.branchAddr);\\r\\n        (,int currPrice,,,) = pricefeed.latestRoundData();\\r\\n\\r\\n        // change state\\r\\n        if (currPrice > target.envFactor) {\\r\\n            enhancerContract.consume(msg.sender, uint(((currPrice << 16)/target.envFactor*target.power) >> 16));\\r\\n        }\\r\\n        target.armed = true;\\r\\n\\r\\n        // emit minion state\\r\\n        emit MinionState(minionID, target.branchAddr, true, target.envFactor, target.power);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa9d5f22a07e38dc818978b6f8e2651f5f4b64b3a42ded0495e99fe310fbcf24a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021e5760003560e01c806370a0823111610126578063b88d4fde116100b3578063b88d4fde1461047a578063c1cae3751461048d578063c87b56dd146104ad578063cdeba622146104c0578063d0248516146104d3578063df069b11146104e6578063e985e9c514610523578063efebc7b014610536578063f2fde38b1461057a578063f37ac61c1461058d578063fccc6623146105a057600080fd5b806370a08231146103d0578063715018a6146103e357806376034ca9146103eb5780637fb7ce86146103fe5780638c7a774a1461041e5780638da5cb5b14610431578063931688cb1461043957806395d89b411461044c578063a22cb46514610454578063b5b0d7821461046757600080fd5b80632a0daeea116101af5780632a0daeea146103115780632e3fca111461031a5780632f745c5914610323578063368004ed146103365780633f15457f1461034957806342842e0e1461035c5780634b2025371461036f5780634f6ccce71461038f5780635b5cc60e146103a25780636352211e146103b55780636c0360eb146103c857600080fd5b806301ffc9a7146102235780630607fa821461024b57806306fdde031461026b578063081812fc14610273578063095ea7b31461029e578063160e3f3d146102b357806318160ddd146102c65780631b55d19e146102d857806320c69c89146102eb57806323b872dd146102fe575b600080fd5b610236610231366004612c4e565b6105b3565b60405190151581526020015b60405180910390f35b61025e610259366004612c36565b6105de565b6040516102429190612f69565b61025e61067e565b610286610281366004612c36565b610710565b6040516001600160a01b039091168152602001610242565b6102b16102ac366004612b4f565b61079d565b005b6102b16102c1366004612c36565b6108ae565b6008545b604051908152602001610242565b6102b16102e6366004612c36565b61099c565b6102b16102f9366004612c36565b610b6f565b6102b161030c366004612a06565b610d01565b6102ca600b5481565b6102ca600c5481565b6102ca610331366004612b4f565b610d32565b6102b1610344366004612c36565b610dc8565b600d54610286906001600160a01b031681565b6102b161036a366004612a06565b610efb565b61038261037d366004612c36565b610f16565b6040516102429190613131565b6102ca61039d366004612c36565b610fa0565b6102b16103b0366004612b95565b611041565b6102866103c3366004612c36565b6110f0565b61025e611167565b6102ca6103de366004612996565b611174565b6102b16111fb565b6102ca6103f9366004612c36565b611236565b61041161040c366004612996565b61124d565b6040516102429190612f25565b6102b161042c366004612c36565b611307565b610286611428565b6102b1610447366004612c86565b611437565b61025e611472565b6102b1610462366004612b1e565b611481565b600a54610286906001600160a01b031681565b6102b1610488366004612a46565b611542565b6104a061049b366004612bc7565b61157a565b6040516102429190612ec4565b61025e6104bb366004612c36565b61165d565b6102b16104ce366004612b7a565b611806565b6102366104e1366004612c36565b61189b565b6104f96104f4366004612c36565b6118a6565b604080516001600160a01b0390951685529215156020850152918301526060820152608001610242565b6102366105313660046129ce565b61190a565b6104f9610544366004612c36565b600e602052600090815260409020805460018201546002909201546001600160a01b03821692600160a01b90920460ff16919084565b6102b1610588366004612996565b611938565b6102b161059b366004612c36565b6119d8565b6102ca6105ae366004612c36565b611be4565b60006001600160e01b0319821663780e9d6360e01b14806105d857506105d882611d95565b92915050565b601681600581106105ee57600080fd5b0180549091506105fd906132ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610629906132ba565b80156106765780601f1061064b57610100808354040283529160200191610676565b820191906000526020600020905b81548152906001019060200180831161065957829003601f168201915b505050505081565b60606000805461068d906132ba565b80601f01602080910402602001604051908101604052809291908181526020018280546106b9906132ba565b80156107065780601f106106db57610100808354040283529160200191610706565b820191906000526020600020905b8154815290600101906020018083116106e957829003601f168201915b5050505050905090565b600061071b82611de5565b6107815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006107a8826110f0565b9050806001600160a01b0316836001600160a01b031614156108165760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610778565b336001600160a01b03821614806108325750610832813361190a565b61089f5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610778565b6108a98383611e02565b505050565b806108b93382611e70565b6108d55760405162461bcd60e51b81526004016107789061301a565b606060006108e2846118a6565b935050505060005b6005811015610975576011816005811061091457634e487b7160e01b600052603260045260246000fd5b015482126109635760106016826005811061093f57634e487b7160e01b600052603260045260246000fd5b01604051602001610951929190612e59565b60405160208183030381529060405292505b8061096d816132ef565b9150506108ea565b506000848152601b602090815260409091208351610995928501906127e9565b5050505050565b806109a73382611e70565b6109c35760405162461bcd60e51b81526004016107789061301a565b6000828152600e602052604090208054600160a01b900460ff166109f95760405162461bcd60e51b8152600401610778906130e8565b805460408051633fabe5a360e21b815290516001600160a01b0390921691600091839163feaf968c9160048082019260a092909190829003018186803b158015610a4257600080fd5b505afa158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190612ce0565b5050509150508260010154811215610b1a57600a54600284015460018501546001600160a01b039092169163224b5c7291339160109190610abe908790841b6131a7565b610ac891906131e1565b901d6040518363ffffffff1660e01b8152600401610ae7929190612eab565b600060405180830381600087803b158015610b0157600080fd5b505af1158015610b15573d6000803e3d6000fd5b505050505b825460ff60a01b1981168455600184015460028501546040805192835260208301919091526000926001600160a01b031691889160008051602061338283398151915291015b60405180910390a45050505050565b80610b7a3382611e70565b610b965760405162461bcd60e51b81526004016107789061301a565b6000828152600e602052604090208054600160a01b900460ff1615610bfd5760405162461bcd60e51b815260206004820152601d60248201527f41524d593a206d696e696f6e20697320616c72656164792061726d65640000006044820152606401610778565b805460408051633fabe5a360e21b815290516001600160a01b0390921691600091839163feaf968c9160048082019260a092909190829003018186803b158015610c4657600080fd5b505afa158015610c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7e9190612ce0565b505050915050601083600201548260108660010154901b610c9f91906131a7565b610ca991906131e1565b901d600284018190556001808501839055845460ff60a01b198116600160a01b17865560405191926001600160a01b0390911691889160008051602061338283398151915291610b6091878252602082015260400190565b610d0b3382611e70565b610d275760405162461bcd60e51b815260040161077890613097565b6108a9838383611f3a565b6000610d3d83611174565b8210610d9f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610778565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b80610dd33382611e70565b610def5760405162461bcd60e51b81526004016107789061301a565b6000828152600e602052604090208054600160a01b900460ff16610e255760405162461bcd60e51b8152600401610778906130e8565b805460408051633fabe5a360e21b815290516001600160a01b0390921691600091839163feaf968c9160048082019260a092909190829003018186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190612ce0565b50505060018501819055845460ff60a01b19811686556002860154604051929450600093506001600160a01b0390911691889160008051602061338283398151915291610b6091878252602082015260400190565b6108a983838360405180602001604052806000815250611542565b610f1e61286d565b610f2782611de5565b610f435760405162461bcd60e51b815260040161077890612f7c565b6000828152600e602090815260409182902080546001600160a01b0381168552600160a01b900460ff1615159184019190915260018101549183019190915260028101546060830152610f958361165d565b608083015250919050565b6000610fab60085490565b821061100e5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610778565b6008828154811061102f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b3361104a611428565b6001600160a01b0316146110705760405162461bcd60e51b815260040161077890613062565b60005b60058110156110ec5781816005811061109c57634e487b7160e01b600052603260045260246000fd5b6020028101906110ac9190613144565b601683600581106110cd57634e487b7160e01b600052603260045260246000fd5b6110d9939101916128a7565b50806110e4816132ef565b915050611073565b5050565b6000818152600260205260408120546001600160a01b0316806105d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610778565b601080546105fd906132ba565b60006001600160a01b0382166111df5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610778565b506001600160a01b031660009081526003602052604090205490565b33611204611428565b6001600160a01b03161461122a5760405162461bcd60e51b815260040161077890613062565b61123460006120d3565b565b6011816005811061124657600080fd5b0154905081565b6060600061125a83611174565b9050806001600160401b0381111561128257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112ab578160200160208202803683370190505b50915060005b81811015611300576112c38482610d32565b8382815181106112e357634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806112f8816132ef565b9150506112b1565b5050919050565b806113123382611e70565b61132e5760405162461bcd60e51b81526004016107789061301a565b6000828152600e60205260409020600c54600282015413156113c357600a54600c5460028301546001600160a01b03909216916366ca10ca9133916113739190613264565b6040518363ffffffff1660e01b8152600401611390929190612eab565b600060405180830381600087803b1580156113aa57600080fd5b505af11580156113be573d6000803e3d6000fd5b505050505b6113cc83612125565b6000838152600e6020908152604080832080546001600160a81b031916815560018101849055600201839055601b9091529020805461140a906132ba565b1590506108a9576000838152601b602052604081206108a99161291b565b600f546001600160a01b031690565b33611440611428565b6001600160a01b0316146114665760405162461bcd60e51b815260040161077890613062565b6108a9601083836128a7565b60606001805461068d906132ba565b6001600160a01b0382163314156114d65760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610778565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61154c3383611e70565b6115685760405162461bcd60e51b815260040161077890613097565b611574848484846121ba565b50505050565b6060816001600160401b038111156115a257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156115db57816020015b6115c861286d565b8152602001906001900390816115c05790505b50905060005b828110156116565761161884848381811061160c57634e487b7160e01b600052603260045260246000fd5b90506020020135610f16565b82828151811061163857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061164e906132ef565b9150506115e1565b5092915050565b606061166882611de5565b6116845760405162461bcd60e51b815260040161077890612f7c565b6000828152601b60205260408120805461169d906132ba565b80601f01602080910402602001604051908101604052809291908181526020018280546116c9906132ba565b80156117165780601f106116eb57610100808354040283529160200191611716565b820191906000526020600020905b8154815290600101906020018083116116f957829003601f168201915b5050505050905060008151111561172d5792915050565b6000611738846118a6565b935050505060005b60058110156117d2576011816005811061176a57634e487b7160e01b600052603260045260246000fd5b015482126117c05760106016826005811061179557634e487b7160e01b600052603260045260246000fd5b016040516020016117a7929190612e59565b6040516020818303038152906040529350505050919050565b806117ca816132ef565b915050611740565b506040516117e890601090601a90602001612e59565b60405160208183030381529060405292505050919050565b50919050565b3361180f611428565b6001600160a01b0316146118355760405162461bcd60e51b815260040161077890613062565b60005b60058110156110ec5781816005811061186157634e487b7160e01b600052603260045260246000fd5b60200201356011826005811061188757634e487b7160e01b600052603260045260246000fd5b015580611893816132ef565b915050611838565b60006105d882611de5565b6000806000806118b585611de5565b6118d15760405162461bcd60e51b815260040161077890612f7c565b505050600091825250600e60205260409020805460018201546002909201546001600160a01b03821693600160a01b90920460ff169291565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33611941611428565b6001600160a01b0316146119675760405162461bcd60e51b815260040161077890613062565b6001600160a01b0381166119cc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610778565b6119d5816120d3565b50565b806119e33382611e70565b6119ff5760405162461bcd60e51b81526004016107789061301a565b6000828152600e602052604090208054600160a01b900460ff1615611a745760405162461bcd60e51b815260206004820152602560248201527f41524d593a206d696e696f6e206973206e6f7420696e20747261696e696e6720604482015264737461746560d81b6064820152608401610778565b805460408051633fabe5a360e21b815290516001600160a01b0390921691600091839163feaf968c9160048082019260a092909190829003018186803b158015611abd57600080fd5b505afa158015611ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af59190612ce0565b5050509150508260010154811315611b9457600a54600284015460018501546001600160a01b039092169163224b5c7291339160109190611b389087841b6131a7565b611b4291906131e1565b901d6040518363ffffffff1660e01b8152600401611b61929190612eab565b600060405180830381600087803b158015611b7b57600080fd5b505af1158015611b8f573d6000803e3d6000fd5b505050505b825460ff60a01b198116600160a01b178455600184810154600286015460405192936001600160a01b031692899260008051602061338283398151915292610b6092918252602082015260400190565b600080611bf0836121ed565b90506001600160a01b038116611c3f5760405162461bcd60e51b8152602060048201526014602482015273082a49ab27440d2dcecc2d8d2c840c4e4c2dcc6d60631b6044820152606401610778565b60008190506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611c7f57600080fd5b505afa158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb79190612ce0565b5050509150506000600b549050611cce33826122f0565b604080516080810182526001600160a01b0380871680835260006020808501828152858701898152600c8054606089019081528a8652600e9094528885209751885493511515600160a01b026001600160a81b0319909416971696909617919091178655516001860155516002909401939093559054925191929091849160008051602061338283398151915291611d6e91888252602082015260400190565b60405180910390a4600b8054906000611d86836132ef565b90915550909695505050505050565b60006001600160e01b031982166380ac58cd60e01b1480611dc657506001600160e01b03198216635b5e139f60e01b145b806105d857506301ffc9a760e01b6001600160e01b03198316146105d8565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611e37826110f0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611e7b82611de5565b611edc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610778565b6000611ee7836110f0565b9050806001600160a01b0316846001600160a01b03161480611f225750836001600160a01b0316611f1784610710565b6001600160a01b0316145b80611f325750611f32818561190a565b949350505050565b826001600160a01b0316611f4d826110f0565b6001600160a01b031614611fb55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610778565b6001600160a01b0382166120175760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610778565b61202283838361230a565b61202d600082611e02565b6001600160a01b03831660009081526003602052604081208054600192906120569084906132a3565b90915550506001600160a01b038216600090815260036020526040812080546001929061208490849061318f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061336283398151915291a4505050565b600f80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612130826110f0565b905061213e8160008461230a565b612149600083611e02565b6001600160a01b03811660009081526003602052604081208054600192906121729084906132a3565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613362833981519152908390a45050565b6121c5848484611f3a565b6121d1848484846123c2565b6115745760405162461bcd60e51b815260040161077890612fc8565b600d54604051630178b8bf60e01b81526004810183905260009182916001600160a01b0390911690630178b8bf9060240160206040518083038186803b15801561223657600080fd5b505afa15801561224a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226e91906129b2565b604051631d9dabef60e11b8152600481018590529091506001600160a01b03821690633b3b57de9060240160206040518083038186803b1580156122b157600080fd5b505afa1580156122c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e991906129b2565b9392505050565b6110ec8282604051806020016040528060008152506124cf565b6001600160a01b0383166123655761236081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612388565b816001600160a01b0316836001600160a01b031614612388576123888382612502565b6001600160a01b03821661239f576108a98161259f565b826001600160a01b0316826001600160a01b0316146108a9576108a98282612678565b60006001600160a01b0384163b156124c457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612406903390899088908890600401612e6e565b602060405180830381600087803b15801561242057600080fd5b505af1925050508015612450575060408051601f3d908101601f1916820190925261244d91810190612c6a565b60015b6124aa573d80801561247e576040519150601f19603f3d011682016040523d82523d6000602084013e612483565b606091505b5080516124a25760405162461bcd60e51b815260040161077890612fc8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611f32565b506001949350505050565b6124d983836126bc565b6124e660008484846123c2565b6108a95760405162461bcd60e51b815260040161077890612fc8565b6000600161250f84611174565b61251991906132a3565b60008381526007602052604090205490915080821461256c576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906125b1906001906132a3565b600083815260096020526040812054600880549394509092849081106125e757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061261657634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061265c57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061268383611174565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166127125760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610778565b61271b81611de5565b156127685760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610778565b6127746000838361230a565b6001600160a01b038216600090815260036020526040812080546001929061279d90849061318f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613362833981519152908290a45050565b8280546127f5906132ba565b90600052602060002090601f016020900481019282612817576000855561285d565b82601f1061283057805160ff191683800117855561285d565b8280016001018555821561285d579182015b8281111561285d578251825591602001919060010190612842565b50612869929150612951565b5090565b6040518060a0016040528060006001600160a01b031681526020016000151581526020016000815260200160008152602001606081525090565b8280546128b3906132ba565b90600052602060002090601f0160209004810192826128d5576000855561285d565b82601f106128ee5782800160ff1982351617855561285d565b8280016001018555821561285d579182015b8281111561285d578235825591602001919060010190612900565b508054612927906132ba565b6000825580601f10612937575050565b601f0160209004906000526020600020908101906119d591905b5b808211156128695760008155600101612952565b8060a081018310156105d857600080fd5b805169ffffffffffffffffffff8116811461299157600080fd5b919050565b6000602082840312156129a7578081fd5b81356122e981613336565b6000602082840312156129c3578081fd5b81516122e981613336565b600080604083850312156129e0578081fd5b82356129eb81613336565b915060208301356129fb81613336565b809150509250929050565b600080600060608486031215612a1a578081fd5b8335612a2581613336565b92506020840135612a3581613336565b929592945050506040919091013590565b60008060008060808587031215612a5b578081fd5b8435612a6681613336565b93506020850135612a7681613336565b92506040850135915060608501356001600160401b0380821115612a98578283fd5b818701915087601f830112612aab578283fd5b813581811115612abd57612abd613320565b604051601f8201601f19908116603f01168101908382118183101715612ae557612ae5613320565b816040528281528a6020848701011115612afd578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612b30578182fd5b8235612b3b81613336565b9150602083013580151581146129fb578182fd5b60008060408385031215612b61578182fd5b8235612b6c81613336565b946020939093013593505050565b600060a08284031215612b8b578081fd5b6122e98383612966565b600060208284031215612ba6578081fd5b81356001600160401b03811115612bbb578182fd5b611f3284828501612966565b60008060208385031215612bd9578182fd5b82356001600160401b0380821115612bef578384fd5b818501915085601f830112612c02578384fd5b813581811115612c10578485fd5b8660208260051b8501011115612c24578485fd5b60209290920196919550909350505050565b600060208284031215612c47578081fd5b5035919050565b600060208284031215612c5f578081fd5b81356122e98161334b565b600060208284031215612c7b578081fd5b81516122e98161334b565b60008060208385031215612c98578182fd5b82356001600160401b0380821115612cae578384fd5b818501915085601f830112612cc1578384fd5b813581811115612ccf578485fd5b866020828501011115612c24578485fd5b600080600080600060a08688031215612cf7578283fd5b612d0086612977565b9450602086015193506040860151925060608601519150612d2360808701612977565b90509295509295909350565b60008151808452815b81811015612d5457602081850181015186830182015201612d38565b81811115612d655782602083870101525b50601f01601f19169290920160200192915050565b8054600090600181811c9080831680612d9457607f831692505b6020808410821415612db457634e487b7160e01b86526022600452602486fd5b818015612dc85760018114612dd957612e06565b60ff19861689528489019650612e06565b60008881526020902060005b86811015612dfe5781548b820152908501908301612de5565b505084890196505b50505050505092915050565b60018060a01b03815116825260208101511515602083015260408101516040830152606081015160608301526000608082015160a06080850152611f3260a0850182612d2f565b6000611f32612e688386612d7a565b84612d7a565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ea190830184612d2f565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b82811015612f1857603f19888603018452612f06858351612e12565b94509285019290850190600101612eea565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612f5d57835183529284019291840191600101612f41565b50909695505050505050565b6020815260006122e96020830184612d2f565b6020808252602c908201527f41524d593a20636f6d6d616e64657220717565727920666f72206e6f6e65786960408201526b39ba32b73a1036b4b734b7b760a11b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526028908201527f41524d593a20636f6d6d616e6465722063616e277420636f6d6d616e64207468604082015267329036b4b734b7b760c11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526029908201527f41524d593a206d696e696f6e20697320616c726561647920696e20747261696e604082015268696e6720737461746560b81b606082015260800190565b6020815260006122e96020830184612e12565b6000808335601e1984360301811261315a578283fd5b8301803591506001600160401b03821115613173578283fd5b60200191503681900382131561318857600080fd5b9250929050565b600082198211156131a2576131a261330a565b500190565b6000826131c257634e487b7160e01b81526012600452602481fd5b600160ff1b8214600019841416156131dc576131dc61330a565b500590565b60006001600160ff1b03818413828413808216868404861116156132075761320761330a565b600160ff1b848712828116878305891216156132255761322561330a565b8587129250878205871284841616156132405761324061330a565b878505871281841616156132565761325661330a565b505050929093029392505050565b60008083128015600160ff1b8501841216156132825761328261330a565b6001600160ff1b038401831381161561329d5761329d61330a565b50500390565b6000828210156132b5576132b561330a565b500390565b600181811c908216806132ce57607f821691505b6020821081141561180057634e487b7160e01b600052602260045260246000fd5b60006000198214156133035761330361330a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146119d557600080fd5b6001600160e01b0319811681146119d557600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef05cf8ce068bd8f8c0e2cfd6182aff2bc80fdfbbf05a0a7ee70f867dc2cecdb0ea26469706673582212202afd20cf0a0b5ab38d26ce9eba187e44304dfa29c49011d5be7fe2f4e88945fd64736f6c63430008040033",
  "devdoc": {
    "author": "Justa Liang",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "arm(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "boost(uint256)": {
        "details": "Commander cost Hemoglobin",
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "changeMetadataNames(string[5])": {
        "details": "Change metadat filename (will be discarded)",
        "params": {
          "metadataNames_": "Array with length 5, from low level URI to high"
        }
      },
      "changePowerLevels(int256[5])": {
        "details": "Change power levels (will be discarded)",
        "params": {
          "powerLevels_": "Array with length 5, from low level to high"
        }
      },
      "constructor": {
        "details": "Set name, symbol, and addresses of interactive contracts",
        "params": {
          "ensRegistryAddr": "Address of ENS Registry"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getMinionIDs(address)": {
        "params": {
          "commander": "Commander of these minions"
        },
        "returns": {
          "minionIDs": "IDs of these minions"
        }
      },
      "getMinionInfo(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        },
        "returns": {
          "_0": "On-chain information of the minion"
        }
      },
      "getMinionProfile(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        },
        "returns": {
          "profile": "Minion info and tokeURI"
        }
      },
      "getTeamProfile(uint256[])": {
        "params": {
          "minionIDs": "IDs of the minions"
        },
        "returns": {
          "teamProfile": "Array of minion info"
        }
      },
      "grant(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "heal(uint256)": {
        "details": "Commander cost Hemoglobin",
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "liberate(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "minionExists(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        },
        "returns": {
          "_0": "Exists or not"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "recruit(bytes32)": {
        "params": {
          "branchHash": "ENS-namehash of given pair (ex: eth-usd.data.eth)"
        },
        "returns": {
          "_0": "ID of the newly recruited minion"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "train(uint256)": {
        "params": {
          "minionID": "ID of the minion"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBaseURI(string)": {
        "details": "Update branch prefix (give ownership to Battlefield contract in the future)",
        "params": {
          "baseURI_": "Prefix of URI to be set"
        }
      }
    },
    "title": "Fauna Army, which grows in bearish market",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MinionState(uint256,address,bool,int256,int256)": {
        "notice": "Emit when minion's state changes "
      }
    },
    "kind": "user",
    "methods": {
      "arm(uint256)": {
        "notice": "Arm a minion and update its power"
      },
      "baseURI()": {
        "notice": "Base URI (prefix)"
      },
      "boost(uint256)": {
        "notice": "Use Hemoglobin to stimulate an armed minion to catch up with training"
      },
      "enhancerContract()": {
        "notice": "Corresponding Enhancer contract"
      },
      "ens()": {
        "notice": "ENS interface (fixed address)"
      },
      "getMinionIDs(address)": {
        "notice": "Get minion IDs, like (2,6,9), given commander"
      },
      "getMinionInfo(uint256)": {
        "notice": "Get minion's on-chain information"
      },
      "getMinionProfile(uint256)": {
        "notice": "Get minion's profile"
      },
      "getTeamProfile(uint256[])": {
        "notice": "Get all minions' info given minion IDs"
      },
      "grant(uint256)": {
        "notice": "Grant minion with current token URI"
      },
      "heal(uint256)": {
        "notice": "Use Hemoglobin to heal a minion who suffer from negative training"
      },
      "initPower()": {
        "notice": "Inital minion's power"
      },
      "liberate(uint256)": {
        "notice": "Liberate a minion and get some enhancer"
      },
      "metadataNames(uint256)": {
        "notice": "Metadata filenames"
      },
      "minionExists(uint256)": {
        "notice": "Get if minion exists"
      },
      "powerLevels(uint256)": {
        "notice": "Level of power to reach to upgrade minions"
      },
      "recruit(bytes32)": {
        "notice": "Recruit a minion"
      },
      "serialNumber()": {
        "notice": "Serial number of minions, imply how many minions have been created"
      },
      "tokenURI(uint256)": {
        "notice": "Get minion's metadata URI"
      },
      "train(uint256)": {
        "notice": "Train a minion and update the environment factor"
      }
    },
    "notice": "ERC721 token cultivated by predicting market price (using Chainlink oracle)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 881,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 883,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 891,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 895,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 901,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1820,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1824,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1827,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1831,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2918,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "enhancerContract",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ENHR)3216"
      },
      {
        "astId": 2921,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "serialNumber",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2924,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "initPower",
        "offset": 0,
        "slot": "12",
        "type": "t_int256"
      },
      {
        "astId": 2928,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "ens",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(ENS)2902"
      },
      {
        "astId": 2954,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "minions",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Minion)2937_storage)"
      },
      {
        "astId": 110,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_owner",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 3289,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "baseURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 3294,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "powerLevels",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_int256)5_storage"
      },
      {
        "astId": 3299,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "metadataNames",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_string_storage)5_storage"
      },
      {
        "astId": 3303,
        "contract": "contracts/FaunaArmy.sol:FaunaArmy",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_int256)5_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_string_storage)5_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ENHR)3216": {
        "encoding": "inplace",
        "label": "contract ENHR",
        "numberOfBytes": "20"
      },
      "t_contract(ENS)2902": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Minion)2937_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ArmyBase.Minion)",
        "numberOfBytes": "32",
        "value": "t_struct(Minion)2937_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Minion)2937_storage": {
        "encoding": "inplace",
        "label": "struct ArmyBase.Minion",
        "members": [
          {
            "astId": 2930,
            "contract": "contracts/FaunaArmy.sol:FaunaArmy",
            "label": "branchAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2932,
            "contract": "contracts/FaunaArmy.sol:FaunaArmy",
            "label": "armed",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2934,
            "contract": "contracts/FaunaArmy.sol:FaunaArmy",
            "label": "envFactor",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 2936,
            "contract": "contracts/FaunaArmy.sol:FaunaArmy",
            "label": "power",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}