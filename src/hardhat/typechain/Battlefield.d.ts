/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BattlefieldInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "assemblyJson()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeAssemblyJson(string)": FunctionFragment;
    "changePropInterval(uint256)": FunctionFragment;
    "changeSlottingFee(uint256)": FunctionFragment;
    "changeVoteInterval(uint256)": FunctionFragment;
    "claimFunds(uint256,address)": FunctionFragment;
    "endVote()": FunctionFragment;
    "expand(uint256)": FunctionFragment;
    "faunaArmy()": FunctionFragment;
    "faunaConquer(uint256,uint256)": FunctionFragment;
    "faunaFieldCount()": FunctionFragment;
    "faunaOnField(uint256)": FunctionFragment;
    "faunaRank()": FunctionFragment;
    "fieldDefender(uint256,uint256)": FunctionFragment;
    "fieldGeneration(uint256)": FunctionFragment;
    "fieldLocked()": FunctionFragment;
    "floraArmy()": FunctionFragment;
    "floraConquer(uint256,uint256)": FunctionFragment;
    "floraFieldCount()": FunctionFragment;
    "floraOnField(uint256)": FunctionFragment;
    "floraRank()": FunctionFragment;
    "generation()": FunctionFragment;
    "getAllFieldInfo()": FunctionFragment;
    "getAllProposalInfo()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getFieldDefender(uint256)": FunctionFragment;
    "getFieldInfo(uint256)": FunctionFragment;
    "getFieldLeader(uint256)": FunctionFragment;
    "getProposalCount()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isFloraField(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "propInterval()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retreat(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "slottingFee()": FunctionFragment;
    "startVote()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalArea()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTime()": FunctionFragment;
    "vote(uint256,uint256)": FunctionFragment;
    "voteInterval()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assemblyJson",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeAssemblyJson",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changePropInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSlottingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeVoteInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "endVote", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "faunaArmy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "faunaConquer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "faunaFieldCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faunaOnField",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "faunaRank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fieldDefender",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fieldGeneration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fieldLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "floraArmy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "floraConquer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "floraFieldCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "floraOnField",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "floraRank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFieldInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProposalInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldDefender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldLeader",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFloraField",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "propose", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retreat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "slottingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startVote", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalArea", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteInterval",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assemblyJson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAssemblyJson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePropInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSlottingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeVoteInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "faunaArmy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "faunaConquer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faunaFieldCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faunaOnField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "faunaRank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fieldDefender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fieldGeneration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fieldLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "floraArmy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "floraConquer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floraFieldCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floraOnField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "floraRank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "generation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllFieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProposalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFieldDefender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFieldLeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFloraField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "retreat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slottingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalArea", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteInterval",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "FieldState(uint256,address,bool,uint256[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Propose(address,uint256,string)": EventFragment;
    "TotalArea(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Vote(uint256,address,uint256,uint256)": EventFragment;
    "Winner(uint256,address,string,uint256,uint256,uint256,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FieldState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Propose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalArea"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Winner"): EventFragment;
}

export class Battlefield extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BattlefieldInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    assemblyJson(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "assemblyJson()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    changeAssemblyJson(
      assemblyJson_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeAssemblyJson(string)"(
      assemblyJson_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changePropInterval(
      propInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changePropInterval(uint256)"(
      propInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeSlottingFee(
      slottingFee_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeSlottingFee(uint256)"(
      slottingFee_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeVoteInterval(
      voteInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeVoteInterval(uint256)"(
      voteInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimFunds(
      amount: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimFunds(uint256,address)"(
      amount: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    endVote(overrides?: Overrides): Promise<ContractTransaction>;

    "endVote()"(overrides?: Overrides): Promise<ContractTransaction>;

    expand(
      increaseSize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "expand(uint256)"(
      increaseSize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    faunaArmy(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "faunaArmy()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    faunaConquer(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "faunaConquer(uint256,uint256)"(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    faunaFieldCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "faunaFieldCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    faunaOnField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "faunaOnField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    faunaRank(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "faunaRank()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    fieldDefender(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "fieldDefender(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    fieldGeneration(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "fieldGeneration(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    fieldLocked(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "fieldLocked()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    floraArmy(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "floraArmy()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    floraConquer(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "floraConquer(uint256,uint256)"(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    floraFieldCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "floraFieldCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    floraOnField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "floraOnField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    floraRank(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "floraRank()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    generation(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "generation()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getAllFieldInfo(overrides?: CallOverrides): Promise<{
      allFieldInfo: {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      }[];
      0: {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      }[];
    }>;

    "getAllFieldInfo()"(overrides?: CallOverrides): Promise<{
      allFieldInfo: {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      }[];
      0: {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      }[];
    }>;

    getAllProposalInfo(overrides?: CallOverrides): Promise<{
      0: {
        proposer: string;
        prefixURI: string;
        voteCount: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
      }[];
    }>;

    "getAllProposalInfo()"(overrides?: CallOverrides): Promise<{
      0: {
        proposer: string;
        prefixURI: string;
        voteCount: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
      }[];
    }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getFieldDefender(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getFieldDefender(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getFieldInfo(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fieldInfo: {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      };
      0: {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      };
    }>;

    "getFieldInfo(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fieldInfo: {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      };
      0: {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      };
    }>;

    getFieldLeader(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getFieldLeader(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getProposalCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getProposalCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isFloraField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isFloraField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    propInterval(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "propInterval()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      prefixURI: string;
      voteCount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      prefixURI: string;
      voteCount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }>;

    propose(
      prefixURI: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "propose(string)"(
      prefixURI: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    retreat(
      fieldID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "retreat(uint256)"(
      fieldID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    slottingFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "slottingFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    startVote(overrides?: Overrides): Promise<ContractTransaction>;

    "startVote()"(overrides?: Overrides): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalArea(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalArea()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "updateTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    vote(
      fieldID: BigNumberish,
      proposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vote(uint256,uint256)"(
      fieldID: BigNumberish,
      proposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    voteInterval(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "voteInterval()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  assemblyJson(overrides?: CallOverrides): Promise<string>;

  "assemblyJson()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeAssemblyJson(
    assemblyJson_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeAssemblyJson(string)"(
    assemblyJson_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changePropInterval(
    propInterval_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changePropInterval(uint256)"(
    propInterval_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeSlottingFee(
    slottingFee_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeSlottingFee(uint256)"(
    slottingFee_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeVoteInterval(
    voteInterval_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeVoteInterval(uint256)"(
    voteInterval_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimFunds(
    amount: BigNumberish,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimFunds(uint256,address)"(
    amount: BigNumberish,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  endVote(overrides?: Overrides): Promise<ContractTransaction>;

  "endVote()"(overrides?: Overrides): Promise<ContractTransaction>;

  expand(
    increaseSize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "expand(uint256)"(
    increaseSize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  faunaArmy(overrides?: CallOverrides): Promise<string>;

  "faunaArmy()"(overrides?: CallOverrides): Promise<string>;

  faunaConquer(
    fieldID: BigNumberish,
    attackerID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "faunaConquer(uint256,uint256)"(
    fieldID: BigNumberish,
    attackerID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  faunaFieldCount(overrides?: CallOverrides): Promise<BigNumber>;

  "faunaFieldCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  faunaOnField(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "faunaOnField(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  faunaRank(overrides?: CallOverrides): Promise<string>;

  "faunaRank()"(overrides?: CallOverrides): Promise<string>;

  fieldDefender(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fieldDefender(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fieldGeneration(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fieldGeneration(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fieldLocked(overrides?: CallOverrides): Promise<boolean>;

  "fieldLocked()"(overrides?: CallOverrides): Promise<boolean>;

  floraArmy(overrides?: CallOverrides): Promise<string>;

  "floraArmy()"(overrides?: CallOverrides): Promise<string>;

  floraConquer(
    fieldID: BigNumberish,
    attackerID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "floraConquer(uint256,uint256)"(
    fieldID: BigNumberish,
    attackerID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  floraFieldCount(overrides?: CallOverrides): Promise<BigNumber>;

  "floraFieldCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  floraOnField(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "floraOnField(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  floraRank(overrides?: CallOverrides): Promise<string>;

  "floraRank()"(overrides?: CallOverrides): Promise<string>;

  generation(overrides?: CallOverrides): Promise<BigNumber>;

  "generation()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAllFieldInfo(
    overrides?: CallOverrides
  ): Promise<
    {
      leader: string;
      defender: BigNumber[];
      isFlora: boolean;
      0: string;
      1: BigNumber[];
      2: boolean;
    }[]
  >;

  "getAllFieldInfo()"(
    overrides?: CallOverrides
  ): Promise<
    {
      leader: string;
      defender: BigNumber[];
      isFlora: boolean;
      0: string;
      1: BigNumber[];
      2: boolean;
    }[]
  >;

  getAllProposalInfo(
    overrides?: CallOverrides
  ): Promise<
    {
      proposer: string;
      prefixURI: string;
      voteCount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }[]
  >;

  "getAllProposalInfo()"(
    overrides?: CallOverrides
  ): Promise<
    {
      proposer: string;
      prefixURI: string;
      voteCount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }[]
  >;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getFieldDefender(
    fieldID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getFieldDefender(uint256)"(
    fieldID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFieldInfo(
    fieldID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    leader: string;
    defender: BigNumber[];
    isFlora: boolean;
    0: string;
    1: BigNumber[];
    2: boolean;
  }>;

  "getFieldInfo(uint256)"(
    fieldID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    leader: string;
    defender: BigNumber[];
    isFlora: boolean;
    0: string;
    1: BigNumber[];
    2: boolean;
  }>;

  getFieldLeader(
    fieldID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getFieldLeader(uint256)"(
    fieldID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getProposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFloraField(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isFloraField(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  propInterval(overrides?: CallOverrides): Promise<BigNumber>;

  "propInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    proposer: string;
    prefixURI: string;
    voteCount: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    proposer: string;
    prefixURI: string;
    voteCount: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
  }>;

  propose(
    prefixURI: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "propose(string)"(
    prefixURI: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  retreat(
    fieldID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "retreat(uint256)"(
    fieldID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  slottingFee(overrides?: CallOverrides): Promise<BigNumber>;

  "slottingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  startVote(overrides?: Overrides): Promise<ContractTransaction>;

  "startVote()"(overrides?: Overrides): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalArea(overrides?: CallOverrides): Promise<BigNumber>;

  "totalArea()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "updateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    fieldID: BigNumberish,
    proposalID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vote(uint256,uint256)"(
    fieldID: BigNumberish,
    proposalID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  voteInterval(overrides?: CallOverrides): Promise<BigNumber>;

  "voteInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assemblyJson(overrides?: CallOverrides): Promise<string>;

    "assemblyJson()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeAssemblyJson(
      assemblyJson_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeAssemblyJson(string)"(
      assemblyJson_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changePropInterval(
      propInterval_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changePropInterval(uint256)"(
      propInterval_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSlottingFee(
      slottingFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeSlottingFee(uint256)"(
      slottingFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeVoteInterval(
      voteInterval_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeVoteInterval(uint256)"(
      voteInterval_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFunds(
      amount: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimFunds(uint256,address)"(
      amount: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    endVote(overrides?: CallOverrides): Promise<void>;

    "endVote()"(overrides?: CallOverrides): Promise<void>;

    expand(
      increaseSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "expand(uint256)"(
      increaseSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    faunaArmy(overrides?: CallOverrides): Promise<string>;

    "faunaArmy()"(overrides?: CallOverrides): Promise<string>;

    faunaConquer(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "faunaConquer(uint256,uint256)"(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    faunaFieldCount(overrides?: CallOverrides): Promise<BigNumber>;

    "faunaFieldCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    faunaOnField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "faunaOnField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    faunaRank(overrides?: CallOverrides): Promise<string>;

    "faunaRank()"(overrides?: CallOverrides): Promise<string>;

    fieldDefender(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fieldDefender(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fieldGeneration(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fieldGeneration(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fieldLocked(overrides?: CallOverrides): Promise<boolean>;

    "fieldLocked()"(overrides?: CallOverrides): Promise<boolean>;

    floraArmy(overrides?: CallOverrides): Promise<string>;

    "floraArmy()"(overrides?: CallOverrides): Promise<string>;

    floraConquer(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "floraConquer(uint256,uint256)"(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    floraFieldCount(overrides?: CallOverrides): Promise<BigNumber>;

    "floraFieldCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    floraOnField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "floraOnField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    floraRank(overrides?: CallOverrides): Promise<string>;

    "floraRank()"(overrides?: CallOverrides): Promise<string>;

    generation(overrides?: CallOverrides): Promise<BigNumber>;

    "generation()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFieldInfo(
      overrides?: CallOverrides
    ): Promise<
      {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      }[]
    >;

    "getAllFieldInfo()"(
      overrides?: CallOverrides
    ): Promise<
      {
        leader: string;
        defender: BigNumber[];
        isFlora: boolean;
        0: string;
        1: BigNumber[];
        2: boolean;
      }[]
    >;

    getAllProposalInfo(
      overrides?: CallOverrides
    ): Promise<
      {
        proposer: string;
        prefixURI: string;
        voteCount: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
      }[]
    >;

    "getAllProposalInfo()"(
      overrides?: CallOverrides
    ): Promise<
      {
        proposer: string;
        prefixURI: string;
        voteCount: BigNumber;
        0: string;
        1: string;
        2: BigNumber;
      }[]
    >;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFieldDefender(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getFieldDefender(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFieldInfo(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      leader: string;
      defender: BigNumber[];
      isFlora: boolean;
      0: string;
      1: BigNumber[];
      2: boolean;
    }>;

    "getFieldInfo(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      leader: string;
      defender: BigNumber[];
      isFlora: boolean;
      0: string;
      1: BigNumber[];
      2: boolean;
    }>;

    getFieldLeader(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getFieldLeader(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFloraField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFloraField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    propInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "propInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      prefixURI: string;
      voteCount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      proposer: string;
      prefixURI: string;
      voteCount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }>;

    propose(prefixURI: string, overrides?: CallOverrides): Promise<void>;

    "propose(string)"(
      prefixURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    retreat(fieldID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "retreat(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    slottingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "slottingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    startVote(overrides?: CallOverrides): Promise<void>;

    "startVote()"(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalArea(overrides?: CallOverrides): Promise<BigNumber>;

    "totalArea()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "updateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      fieldID: BigNumberish,
      proposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(uint256,uint256)"(
      fieldID: BigNumberish,
      proposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "voteInterval()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    FieldState(
      fieldID: BigNumberish | null,
      conqueror: string | null,
      isGreen: boolean | null,
      defender: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Propose(
      proposer: string | null,
      proposalID: null,
      prefixURI: null
    ): EventFilter;

    TotalArea(totalArea: null): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    Vote(
      fieldID: BigNumberish | null,
      voter: string | null,
      proposalID: BigNumberish | null,
      voteCount: null
    ): EventFilter;

    Winner(
      generation: BigNumberish | null,
      winner: string | null,
      tokenURI: null,
      proposalCount: null,
      voteCount: null,
      totalArea: null,
      floraWin: null,
      faunaWin: null
    ): EventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    assemblyJson(overrides?: CallOverrides): Promise<BigNumber>;

    "assemblyJson()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeAssemblyJson(
      assemblyJson_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeAssemblyJson(string)"(
      assemblyJson_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changePropInterval(
      propInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changePropInterval(uint256)"(
      propInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeSlottingFee(
      slottingFee_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeSlottingFee(uint256)"(
      slottingFee_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeVoteInterval(
      voteInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeVoteInterval(uint256)"(
      voteInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimFunds(
      amount: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimFunds(uint256,address)"(
      amount: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    endVote(overrides?: Overrides): Promise<BigNumber>;

    "endVote()"(overrides?: Overrides): Promise<BigNumber>;

    expand(
      increaseSize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "expand(uint256)"(
      increaseSize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    faunaArmy(overrides?: CallOverrides): Promise<BigNumber>;

    "faunaArmy()"(overrides?: CallOverrides): Promise<BigNumber>;

    faunaConquer(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "faunaConquer(uint256,uint256)"(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    faunaFieldCount(overrides?: CallOverrides): Promise<BigNumber>;

    "faunaFieldCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    faunaOnField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "faunaOnField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    faunaRank(overrides?: CallOverrides): Promise<BigNumber>;

    "faunaRank()"(overrides?: CallOverrides): Promise<BigNumber>;

    fieldDefender(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fieldDefender(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fieldGeneration(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fieldGeneration(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fieldLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "fieldLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    floraArmy(overrides?: CallOverrides): Promise<BigNumber>;

    "floraArmy()"(overrides?: CallOverrides): Promise<BigNumber>;

    floraConquer(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "floraConquer(uint256,uint256)"(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    floraFieldCount(overrides?: CallOverrides): Promise<BigNumber>;

    "floraFieldCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    floraOnField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "floraOnField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floraRank(overrides?: CallOverrides): Promise<BigNumber>;

    "floraRank()"(overrides?: CallOverrides): Promise<BigNumber>;

    generation(overrides?: CallOverrides): Promise<BigNumber>;

    "generation()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFieldInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllFieldInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllProposalInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllProposalInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldDefender(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFieldDefender(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldInfo(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFieldInfo(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldLeader(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFieldLeader(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFloraField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFloraField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "propInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      prefixURI: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "propose(string)"(
      prefixURI: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    retreat(fieldID: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "retreat(uint256)"(
      fieldID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    slottingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "slottingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    startVote(overrides?: Overrides): Promise<BigNumber>;

    "startVote()"(overrides?: Overrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalArea(overrides?: CallOverrides): Promise<BigNumber>;

    "totalArea()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "updateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      fieldID: BigNumberish,
      proposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vote(uint256,uint256)"(
      fieldID: BigNumberish,
      proposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    voteInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "voteInterval()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    assemblyJson(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assemblyJson()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeAssemblyJson(
      assemblyJson_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeAssemblyJson(string)"(
      assemblyJson_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changePropInterval(
      propInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changePropInterval(uint256)"(
      propInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeSlottingFee(
      slottingFee_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeSlottingFee(uint256)"(
      slottingFee_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeVoteInterval(
      voteInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeVoteInterval(uint256)"(
      voteInterval_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimFunds(
      amount: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimFunds(uint256,address)"(
      amount: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    endVote(overrides?: Overrides): Promise<PopulatedTransaction>;

    "endVote()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    expand(
      increaseSize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "expand(uint256)"(
      increaseSize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    faunaArmy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "faunaArmy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    faunaConquer(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "faunaConquer(uint256,uint256)"(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    faunaFieldCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "faunaFieldCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faunaOnField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "faunaOnField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faunaRank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "faunaRank()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fieldDefender(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fieldDefender(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fieldGeneration(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fieldGeneration(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fieldLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fieldLocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floraArmy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "floraArmy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floraConquer(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "floraConquer(uint256,uint256)"(
      fieldID: BigNumberish,
      attackerID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    floraFieldCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "floraFieldCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    floraOnField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "floraOnField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    floraRank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "floraRank()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "generation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllFieldInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllFieldInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllProposalInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllProposalInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldDefender(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFieldDefender(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldInfo(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFieldInfo(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldLeader(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFieldLeader(uint256)"(
      fieldID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getProposalCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFloraField(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFloraField(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "propInterval()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      prefixURI: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "propose(string)"(
      prefixURI: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    retreat(
      fieldID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "retreat(uint256)"(
      fieldID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    slottingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "slottingFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startVote(overrides?: Overrides): Promise<PopulatedTransaction>;

    "startVote()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalArea(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalArea()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "updateTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      fieldID: BigNumberish,
      proposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vote(uint256,uint256)"(
      fieldID: BigNumberish,
      proposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    voteInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "voteInterval()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
