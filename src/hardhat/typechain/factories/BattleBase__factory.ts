/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from "ethers";
import { Provider } from "@ethersproject/providers";

import type { BattleBase } from "../BattleBase";

export class BattleBase__factory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BattleBase {
    return new Contract(address, _abi, signerOrProvider) as BattleBase;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "fieldID",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "conqueror",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "isGreen",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "defender",
        type: "uint256[]",
      },
    ],
    name: "FieldState",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "totalArea",
        type: "uint256",
      },
    ],
    name: "TotalArea",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "increaseSize",
        type: "uint256",
      },
    ],
    name: "expand",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "faunaArmy",
    outputs: [
      {
        internalType: "contract ARMY",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fieldID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "attackerID",
        type: "uint256",
      },
    ],
    name: "faunaConquer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "faunaFieldCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "faunaOnField",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "fieldDefender",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fieldLocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "floraArmy",
    outputs: [
      {
        internalType: "contract ARMY",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fieldID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "attackerID",
        type: "uint256",
      },
    ],
    name: "floraConquer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "floraFieldCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "floraOnField",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fieldID",
        type: "uint256",
      },
    ],
    name: "getFieldDefender",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fieldID",
        type: "uint256",
      },
    ],
    name: "getFieldInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "leader",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "defender",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "isFlora",
            type: "bool",
          },
        ],
        internalType: "struct BattleBase.FieldInfo",
        name: "fieldInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fieldID",
        type: "uint256",
      },
    ],
    name: "getFieldLeader",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "startId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "area",
        type: "uint256",
      },
    ],
    name: "getRangeInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "leader",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "defender",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "isFlora",
            type: "bool",
          },
        ],
        internalType: "struct BattleBase.FieldInfo[]",
        name: "rangeInfo",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "isFloraField",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fieldID",
        type: "uint256",
      },
    ],
    name: "retreat",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalArea",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];
