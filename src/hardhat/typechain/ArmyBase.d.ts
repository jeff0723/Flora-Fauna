/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ArmyBaseInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "arm(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "boost(uint256)": FunctionFragment;
    "enhancerContract()": FunctionFragment;
    "ens()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getMinionIDs(address)": FunctionFragment;
    "getMinionInfo(uint256)": FunctionFragment;
    "getMinionProfile(uint256)": FunctionFragment;
    "getTeamInfo(uint256[])": FunctionFragment;
    "grant(uint256)": FunctionFragment;
    "heal(uint256)": FunctionFragment;
    "initPower()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "liberate(uint256)": FunctionFragment;
    "minionExists(uint256)": FunctionFragment;
    "minions(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "population()": FunctionFragment;
    "rankContract()": FunctionFragment;
    "recruit(bytes32)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "serialNumber()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "train(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "arm", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "boost", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "enhancerContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinionIDs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinionProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamInfo",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "grant", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "heal", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "initPower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liberate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minionExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "population",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rankContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "recruit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serialNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "train", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enhancerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinionIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinionProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initPower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liberate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "population", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rankContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recruit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serialNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "train", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MinionState(uint256,address,bool,int256,int256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinionState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class ArmyBase extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ArmyBaseInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    arm(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "arm(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    boost(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "boost(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enhancerContract(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "enhancerContract()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ens(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ens()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getMinionIDs(
      commander: string,
      overrides?: CallOverrides
    ): Promise<{
      minionIDs: BigNumber[];
      0: BigNumber[];
    }>;

    "getMinionIDs(address)"(
      commander: string,
      overrides?: CallOverrides
    ): Promise<{
      minionIDs: BigNumber[];
      0: BigNumber[];
    }>;

    getMinionInfo(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }>;

    "getMinionInfo(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }>;

    getMinionProfile(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      profile: {
        branch: string;
        armed: boolean;
        price: BigNumber;
        power: BigNumber;
        uri: string;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
        4: string;
      };
      0: {
        branch: string;
        armed: boolean;
        price: BigNumber;
        power: BigNumber;
        uri: string;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
        4: string;
      };
    }>;

    "getMinionProfile(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      profile: {
        branch: string;
        armed: boolean;
        price: BigNumber;
        power: BigNumber;
        uri: string;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
        4: string;
      };
      0: {
        branch: string;
        armed: boolean;
        price: BigNumber;
        power: BigNumber;
        uri: string;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
        4: string;
      };
    }>;

    getTeamInfo(
      minionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      teamInfo: {
        branchAddr: string;
        armed: boolean;
        envFactor: BigNumber;
        power: BigNumber;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
      }[];
      0: {
        branchAddr: string;
        armed: boolean;
        envFactor: BigNumber;
        power: BigNumber;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
      }[];
    }>;

    "getTeamInfo(uint256[])"(
      minionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      teamInfo: {
        branchAddr: string;
        armed: boolean;
        envFactor: BigNumber;
        power: BigNumber;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
      }[];
      0: {
        branchAddr: string;
        armed: boolean;
        envFactor: BigNumber;
        power: BigNumber;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
      }[];
    }>;

    grant(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grant(uint256)"(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    heal(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "heal(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initPower(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "initPower()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    liberate(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liberate(uint256)"(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minionExists(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "minionExists(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    minions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      branchAddr: string;
      armed: boolean;
      envFactor: BigNumber;
      power: BigNumber;
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }>;

    "minions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      branchAddr: string;
      armed: boolean;
      envFactor: BigNumber;
      power: BigNumber;
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    population(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "population()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    rankContract(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rankContract()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    recruit(
      branchHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recruit(bytes32)"(
      branchHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    serialNumber(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "serialNumber()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenURI(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    train(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "train(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  arm(arg0: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "arm(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  boost(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "boost(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enhancerContract(overrides?: CallOverrides): Promise<string>;

  "enhancerContract()"(overrides?: CallOverrides): Promise<string>;

  ens(overrides?: CallOverrides): Promise<string>;

  "ens()"(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMinionIDs(
    commander: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getMinionIDs(address)"(
    commander: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMinionInfo(
    minionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
    2: BigNumber;
    3: BigNumber;
  }>;

  "getMinionInfo(uint256)"(
    minionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: boolean;
    2: BigNumber;
    3: BigNumber;
  }>;

  getMinionProfile(
    minionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    branch: string;
    armed: boolean;
    price: BigNumber;
    power: BigNumber;
    uri: string;
    0: string;
    1: boolean;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  "getMinionProfile(uint256)"(
    minionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    branch: string;
    armed: boolean;
    price: BigNumber;
    power: BigNumber;
    uri: string;
    0: string;
    1: boolean;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  getTeamInfo(
    minionIDs: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    {
      branchAddr: string;
      armed: boolean;
      envFactor: BigNumber;
      power: BigNumber;
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }[]
  >;

  "getTeamInfo(uint256[])"(
    minionIDs: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    {
      branchAddr: string;
      armed: boolean;
      envFactor: BigNumber;
      power: BigNumber;
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }[]
  >;

  grant(
    minionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grant(uint256)"(
    minionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  heal(arg0: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "heal(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initPower(overrides?: CallOverrides): Promise<BigNumber>;

  "initPower()"(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liberate(
    minionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liberate(uint256)"(
    minionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minionExists(
    minionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "minionExists(uint256)"(
    minionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    branchAddr: string;
    armed: boolean;
    envFactor: BigNumber;
    power: BigNumber;
    0: string;
    1: boolean;
    2: BigNumber;
    3: BigNumber;
  }>;

  "minions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    branchAddr: string;
    armed: boolean;
    envFactor: BigNumber;
    power: BigNumber;
    0: string;
    1: boolean;
    2: BigNumber;
    3: BigNumber;
  }>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  population(overrides?: CallOverrides): Promise<BigNumber>;

  "population()"(overrides?: CallOverrides): Promise<BigNumber>;

  rankContract(overrides?: CallOverrides): Promise<string>;

  "rankContract()"(overrides?: CallOverrides): Promise<string>;

  recruit(
    branchHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recruit(bytes32)"(
    branchHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  serialNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "serialNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(minionID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    minionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  train(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "train(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    arm(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "arm(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boost(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "boost(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enhancerContract(overrides?: CallOverrides): Promise<string>;

    "enhancerContract()"(overrides?: CallOverrides): Promise<string>;

    ens(overrides?: CallOverrides): Promise<string>;

    "ens()"(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMinionIDs(
      commander: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getMinionIDs(address)"(
      commander: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMinionInfo(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }>;

    "getMinionInfo(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }>;

    getMinionProfile(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      branch: string;
      armed: boolean;
      price: BigNumber;
      power: BigNumber;
      uri: string;
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    "getMinionProfile(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      branch: string;
      armed: boolean;
      price: BigNumber;
      power: BigNumber;
      uri: string;
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    getTeamInfo(
      minionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      {
        branchAddr: string;
        armed: boolean;
        envFactor: BigNumber;
        power: BigNumber;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
      }[]
    >;

    "getTeamInfo(uint256[])"(
      minionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      {
        branchAddr: string;
        armed: boolean;
        envFactor: BigNumber;
        power: BigNumber;
        0: string;
        1: boolean;
        2: BigNumber;
        3: BigNumber;
      }[]
    >;

    grant(minionID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "grant(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    heal(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "heal(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initPower(overrides?: CallOverrides): Promise<BigNumber>;

    "initPower()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liberate(minionID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "liberate(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minionExists(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "minionExists(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      branchAddr: string;
      armed: boolean;
      envFactor: BigNumber;
      power: BigNumber;
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }>;

    "minions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      branchAddr: string;
      armed: boolean;
      envFactor: BigNumber;
      power: BigNumber;
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    population(overrides?: CallOverrides): Promise<BigNumber>;

    "population()"(overrides?: CallOverrides): Promise<BigNumber>;

    rankContract(overrides?: CallOverrides): Promise<string>;

    "rankContract()"(overrides?: CallOverrides): Promise<string>;

    recruit(
      branchHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "recruit(bytes32)"(
      branchHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    serialNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "serialNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    train(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "train(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    MinionState(
      minionID: BigNumberish | null,
      branchAddress: string | null,
      armed: boolean | null,
      environmentFactor: null,
      power: null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    arm(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "arm(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boost(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "boost(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enhancerContract(overrides?: CallOverrides): Promise<BigNumber>;

    "enhancerContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    ens(overrides?: CallOverrides): Promise<BigNumber>;

    "ens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinionIDs(
      commander: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinionIDs(address)"(
      commander: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinionInfo(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinionInfo(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinionProfile(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinionProfile(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTeamInfo(
      minionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTeamInfo(uint256[])"(
      minionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grant(minionID: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "grant(uint256)"(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    heal(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "heal(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initPower(overrides?: CallOverrides): Promise<BigNumber>;

    "initPower()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liberate(minionID: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "liberate(uint256)"(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    minionExists(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minionExists(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "minions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    population(overrides?: CallOverrides): Promise<BigNumber>;

    "population()"(overrides?: CallOverrides): Promise<BigNumber>;

    rankContract(overrides?: CallOverrides): Promise<BigNumber>;

    "rankContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    recruit(branchHash: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "recruit(bytes32)"(
      branchHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    serialNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "serialNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    train(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "train(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    arm(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "arm(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boost(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "boost(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enhancerContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "enhancerContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinionIDs(
      commander: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinionIDs(address)"(
      commander: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinionInfo(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinionInfo(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinionProfile(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinionProfile(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTeamInfo(
      minionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTeamInfo(uint256[])"(
      minionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grant(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grant(uint256)"(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    heal(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "heal(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initPower()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liberate(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liberate(uint256)"(
      minionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minionExists(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minionExists(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    population(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "population()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rankContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rankContract()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recruit(
      branchHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recruit(bytes32)"(
      branchHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    serialNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "serialNumber()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      minionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    train(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "train(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
